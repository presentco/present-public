/// Generated by the Protocol Buffers 3.2.0 compiler.  DO NOT EDIT!
/// Protobuf-swift version: 3.0.13
/// Source file "ping.proto"
/// Syntax "Proto2"

import Foundation
import ProtocolBuffers


public extension Present{}

public extension Present {
    public struct PingRoot {
        public static let `default` = PingRoot()
        public var extensionRegistry:ExtensionRegistry

        init() {
            extensionRegistry = ExtensionRegistry()
            registerAllExtensions(registry: extensionRegistry)
            Present.CoreRoot.default.registerAllExtensions(registry: extensionRegistry)
        }
        public func registerAllExtensions(registry: ExtensionRegistry) {
        }
    }

    final public class PingRequest : GeneratedMessage {

        public static func == (lhs: Present.PingRequest, rhs: Present.PingRequest) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasValue == rhs.hasValue) && (!lhs.hasValue || lhs.value == rhs.value)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }

        public fileprivate(set) var value:UInt32 = UInt32(0)
        public fileprivate(set) var hasValue:Bool = false

        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            if !hasValue {
                return false
            }
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if hasValue {
                try codedOutputStream.writeUInt32(fieldNumber: 1, value:value)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            if hasValue {
                serialize_size += value.computeUInt32Size(fieldNumber: 1)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> Present.PingRequest.Builder {
            return Present.PingRequest.classBuilder() as! Present.PingRequest.Builder
        }
        public func getBuilder() -> Present.PingRequest.Builder {
            return classBuilder() as! Present.PingRequest.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Present.PingRequest.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Present.PingRequest.Builder()
        }
        public func toBuilder() throws -> Present.PingRequest.Builder {
            return try Present.PingRequest.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Present.PingRequest) throws -> Present.PingRequest.Builder {
            return try Present.PingRequest.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if hasValue {
                jsonMap["value"] = UInt(value)
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Present.PingRequest {
            return try Present.PingRequest.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Present.PingRequest {
            return try Present.PingRequest.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            if hasValue {
                output += "\(indent) value: \(value) \n"
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasValue {
                    hashCode = (hashCode &* 31) &+ value.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Present.PingRequest"
        }
        override public func className() -> String {
            return "Present.PingRequest"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:Present.PingRequest = Present.PingRequest()
            public func getMessage() -> Present.PingRequest {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            public var value:UInt32 {
                get {
                    return builderResult.value
                }
                set (value) {
                    builderResult.hasValue = true
                    builderResult.value = value
                }
            }
            public var hasValue:Bool {
                get {
                    return builderResult.hasValue
                }
            }
            @discardableResult
            public func setValue(_ value:UInt32) -> Present.PingRequest.Builder {
                self.value = value
                return self
            }
            @discardableResult
            public func clearValue() -> Present.PingRequest.Builder{
                builderResult.hasValue = false
                builderResult.value = UInt32(0)
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> Present.PingRequest.Builder {
                builderResult = Present.PingRequest()
                return self
            }
            override public func clone() throws -> Present.PingRequest.Builder {
                return try Present.PingRequest.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> Present.PingRequest {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> Present.PingRequest {
                let returnMe:Present.PingRequest = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:Present.PingRequest) throws -> Present.PingRequest.Builder {
                if other == Present.PingRequest() {
                    return self
                }
                if other.hasValue {
                    value = other.value
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Present.PingRequest.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Present.PingRequest.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 8:
                        value = try codedInputStream.readUInt32()

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Present.PingRequest.Builder {
                let resultDecodedBuilder = Present.PingRequest.Builder()
                if let jsonValueValue = jsonMap["value"] as? UInt {
                    resultDecodedBuilder.value = UInt32(jsonValueValue)
                } else if let jsonValueValue = jsonMap["value"] as? String {
                    resultDecodedBuilder.value = UInt32(jsonValueValue)!
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> Present.PingRequest.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try Present.PingRequest.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

    final public class PingResponse : GeneratedMessage {

        public static func == (lhs: Present.PingResponse, rhs: Present.PingResponse) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasValue == rhs.hasValue) && (!lhs.hasValue || lhs.value == rhs.value)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }

        public fileprivate(set) var value:UInt32 = UInt32(0)
        public fileprivate(set) var hasValue:Bool = false

        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            if !hasValue {
                return false
            }
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if hasValue {
                try codedOutputStream.writeUInt32(fieldNumber: 1, value:value)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            if hasValue {
                serialize_size += value.computeUInt32Size(fieldNumber: 1)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> Present.PingResponse.Builder {
            return Present.PingResponse.classBuilder() as! Present.PingResponse.Builder
        }
        public func getBuilder() -> Present.PingResponse.Builder {
            return classBuilder() as! Present.PingResponse.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Present.PingResponse.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Present.PingResponse.Builder()
        }
        public func toBuilder() throws -> Present.PingResponse.Builder {
            return try Present.PingResponse.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Present.PingResponse) throws -> Present.PingResponse.Builder {
            return try Present.PingResponse.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if hasValue {
                jsonMap["value"] = UInt(value)
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Present.PingResponse {
            return try Present.PingResponse.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Present.PingResponse {
            return try Present.PingResponse.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            if hasValue {
                output += "\(indent) value: \(value) \n"
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasValue {
                    hashCode = (hashCode &* 31) &+ value.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Present.PingResponse"
        }
        override public func className() -> String {
            return "Present.PingResponse"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:Present.PingResponse = Present.PingResponse()
            public func getMessage() -> Present.PingResponse {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            public var value:UInt32 {
                get {
                    return builderResult.value
                }
                set (value) {
                    builderResult.hasValue = true
                    builderResult.value = value
                }
            }
            public var hasValue:Bool {
                get {
                    return builderResult.hasValue
                }
            }
            @discardableResult
            public func setValue(_ value:UInt32) -> Present.PingResponse.Builder {
                self.value = value
                return self
            }
            @discardableResult
            public func clearValue() -> Present.PingResponse.Builder{
                builderResult.hasValue = false
                builderResult.value = UInt32(0)
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> Present.PingResponse.Builder {
                builderResult = Present.PingResponse()
                return self
            }
            override public func clone() throws -> Present.PingResponse.Builder {
                return try Present.PingResponse.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> Present.PingResponse {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> Present.PingResponse {
                let returnMe:Present.PingResponse = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:Present.PingResponse) throws -> Present.PingResponse.Builder {
                if other == Present.PingResponse() {
                    return self
                }
                if other.hasValue {
                    value = other.value
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Present.PingResponse.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Present.PingResponse.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 8:
                        value = try codedInputStream.readUInt32()

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Present.PingResponse.Builder {
                let resultDecodedBuilder = Present.PingResponse.Builder()
                if let jsonValueValue = jsonMap["value"] as? UInt {
                    resultDecodedBuilder.value = UInt32(jsonValueValue)
                } else if let jsonValueValue = jsonMap["value"] as? String {
                    resultDecodedBuilder.value = UInt32(jsonValueValue)!
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> Present.PingResponse.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try Present.PingResponse.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

    final public class VersionCheckResult : GeneratedMessage {

        public static func == (lhs: Present.VersionCheckResult, rhs: Present.VersionCheckResult) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasStatus == rhs.hasStatus) && (!lhs.hasStatus || lhs.status == rhs.status)
            fieldCheck = fieldCheck && (lhs.hasLatestVersionUrl == rhs.hasLatestVersionUrl) && (!lhs.hasLatestVersionUrl || lhs.latestVersionUrl == rhs.latestVersionUrl)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }



            //Enum type declaration start 

            public enum Status:Int32, CustomDebugStringConvertible, CustomStringConvertible, Hashable {
                case current = 1
                case upgradeAvailable = 2
                case upgradeRequired = 3
                public func toString() -> String {
                    switch self {
                    case .current: return "Current"
                    case .upgradeAvailable: return "UpgradeAvailable"
                    case .upgradeRequired: return "UpgradeRequired"
                    }
                }
                public static func fromString(str:String) throws -> Present.VersionCheckResult.Status {
                    switch str {
                    case "Current":    return .current
                    case "UpgradeAvailable":    return .upgradeAvailable
                    case "UpgradeRequired":    return .upgradeRequired
                    default: throw ProtocolBuffersError.invalidProtocolBuffer("Conversion String to Enum has failed.")
                    }
                }
                public var debugDescription:String { return getDescription() }
                public var description:String { return getDescription() }
                private func getDescription() -> String { 
                    switch self {
                    case .current: return ".current"
                    case .upgradeAvailable: return ".upgradeAvailable"
                    case .upgradeRequired: return ".upgradeRequired"
                    }
                }
                public var hashValue:Int {
                    return self.rawValue.hashValue
                }
                public static func ==(lhs:Status, rhs:Status) -> Bool {
                    return lhs.hashValue == rhs.hashValue
                }
            }

            //Enum type declaration end 

        public fileprivate(set) var status:Present.VersionCheckResult.Status = Present.VersionCheckResult.Status.current
        public fileprivate(set) var hasStatus:Bool = false
        /// A URL for the user to get the latest version of the client app.
        public fileprivate(set) var latestVersionUrl:String = ""
        public fileprivate(set) var hasLatestVersionUrl:Bool = false

        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            if !hasStatus {
                return false
            }
            if !hasLatestVersionUrl {
                return false
            }
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if hasStatus {
                try codedOutputStream.writeEnum(fieldNumber: 1, value:status.rawValue)
            }
            if hasLatestVersionUrl {
                try codedOutputStream.writeString(fieldNumber: 2, value:latestVersionUrl)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            if (hasStatus) {
                serialize_size += status.rawValue.computeEnumSize(fieldNumber: 1)
            }
            if hasLatestVersionUrl {
                serialize_size += latestVersionUrl.computeStringSize(fieldNumber: 2)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> Present.VersionCheckResult.Builder {
            return Present.VersionCheckResult.classBuilder() as! Present.VersionCheckResult.Builder
        }
        public func getBuilder() -> Present.VersionCheckResult.Builder {
            return classBuilder() as! Present.VersionCheckResult.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Present.VersionCheckResult.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Present.VersionCheckResult.Builder()
        }
        public func toBuilder() throws -> Present.VersionCheckResult.Builder {
            return try Present.VersionCheckResult.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Present.VersionCheckResult) throws -> Present.VersionCheckResult.Builder {
            return try Present.VersionCheckResult.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if hasStatus {
                jsonMap["status"] = status.toString()
            }
            if hasLatestVersionUrl {
                jsonMap["latestVersionUrl"] = latestVersionUrl
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Present.VersionCheckResult {
            return try Present.VersionCheckResult.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Present.VersionCheckResult {
            return try Present.VersionCheckResult.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            if (hasStatus) {
                output += "\(indent) status: \(status.description)\n"
            }
            if hasLatestVersionUrl {
                output += "\(indent) latestVersionUrl: \(latestVersionUrl) \n"
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasStatus {
                     hashCode = (hashCode &* 31) &+ status.hashValue
                }
                if hasLatestVersionUrl {
                    hashCode = (hashCode &* 31) &+ latestVersionUrl.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Present.VersionCheckResult"
        }
        override public func className() -> String {
            return "Present.VersionCheckResult"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:Present.VersionCheckResult = Present.VersionCheckResult()
            public func getMessage() -> Present.VersionCheckResult {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            /// The status of the client application
                public var status:Present.VersionCheckResult.Status {
                    get {
                        return builderResult.status
                    }
                    set (value) {
                        builderResult.hasStatus = true
                        builderResult.status = value
                    }
                }
                public var hasStatus:Bool{
                    get {
                        return builderResult.hasStatus
                    }
                }
            @discardableResult
                public func setStatus(_ value:Present.VersionCheckResult.Status) -> Present.VersionCheckResult.Builder {
                  self.status = value
                  return self
                }
            @discardableResult
                public func clearStatus() -> Present.VersionCheckResult.Builder {
                   builderResult.hasStatus = false
                   builderResult.status = .current
                   return self
                }
            /// A URL for the user to get the latest version of the client app.
            public var latestVersionUrl:String {
                get {
                    return builderResult.latestVersionUrl
                }
                set (value) {
                    builderResult.hasLatestVersionUrl = true
                    builderResult.latestVersionUrl = value
                }
            }
            public var hasLatestVersionUrl:Bool {
                get {
                    return builderResult.hasLatestVersionUrl
                }
            }
            @discardableResult
            public func setLatestVersionUrl(_ value:String) -> Present.VersionCheckResult.Builder {
                self.latestVersionUrl = value
                return self
            }
            @discardableResult
            public func clearLatestVersionUrl() -> Present.VersionCheckResult.Builder{
                builderResult.hasLatestVersionUrl = false
                builderResult.latestVersionUrl = ""
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> Present.VersionCheckResult.Builder {
                builderResult = Present.VersionCheckResult()
                return self
            }
            override public func clone() throws -> Present.VersionCheckResult.Builder {
                return try Present.VersionCheckResult.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> Present.VersionCheckResult {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> Present.VersionCheckResult {
                let returnMe:Present.VersionCheckResult = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:Present.VersionCheckResult) throws -> Present.VersionCheckResult.Builder {
                if other == Present.VersionCheckResult() {
                    return self
                }
                if other.hasStatus {
                    status = other.status
                }
                if other.hasLatestVersionUrl {
                    latestVersionUrl = other.latestVersionUrl
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Present.VersionCheckResult.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Present.VersionCheckResult.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 8:
                        let valueIntstatus = try codedInputStream.readEnum()
                        if let enumsstatus = Present.VersionCheckResult.Status(rawValue:valueIntstatus){
                            status = enumsstatus
                        } else {
                            try unknownFieldsBuilder.mergeVarintField(fieldNumber: 1, value:Int64(valueIntstatus))
                        }

                    case 18:
                        latestVersionUrl = try codedInputStream.readString()

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Present.VersionCheckResult.Builder {
                let resultDecodedBuilder = Present.VersionCheckResult.Builder()
                if let jsonValueStatus = jsonMap["status"] as? String {
                    resultDecodedBuilder.status = try Present.VersionCheckResult.Status.fromString(str: jsonValueStatus)
                }
                if let jsonValueLatestVersionUrl = jsonMap["latestVersionUrl"] as? String {
                    resultDecodedBuilder.latestVersionUrl = jsonValueLatestVersionUrl
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> Present.VersionCheckResult.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try Present.VersionCheckResult.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

}
extension Present.PingRequest: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Present.PingRequest> {
        var mergedArray = Array<Present.PingRequest>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Present.PingRequest? {
        return try Present.PingRequest.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Present.PingRequest {
        return try Present.PingRequest.Builder().mergeFrom(data: data, extensionRegistry:Present.PingRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Present.PingRequest {
        return try Present.PingRequest.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Present.PingRequest {
        return try Present.PingRequest.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Present.PingRequest {
        return try Present.PingRequest.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Present.PingRequest {
        return try Present.PingRequest.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Present.PingRequest {
        return try Present.PingRequest.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "value": return self.value
        default: return nil
        }
    }
}
extension Present.PingRequest.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "value": return self.value
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "value":
                guard let newSubscriptValue = newSubscriptValue as? UInt32 else {
                    return
                }
                self.value = newSubscriptValue
            default: return
            }
        }
    }
}
extension Present.PingResponse: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Present.PingResponse> {
        var mergedArray = Array<Present.PingResponse>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Present.PingResponse? {
        return try Present.PingResponse.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Present.PingResponse {
        return try Present.PingResponse.Builder().mergeFrom(data: data, extensionRegistry:Present.PingRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Present.PingResponse {
        return try Present.PingResponse.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Present.PingResponse {
        return try Present.PingResponse.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Present.PingResponse {
        return try Present.PingResponse.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Present.PingResponse {
        return try Present.PingResponse.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Present.PingResponse {
        return try Present.PingResponse.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "value": return self.value
        default: return nil
        }
    }
}
extension Present.PingResponse.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "value": return self.value
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "value":
                guard let newSubscriptValue = newSubscriptValue as? UInt32 else {
                    return
                }
                self.value = newSubscriptValue
            default: return
            }
        }
    }
}
extension Present.VersionCheckResult: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Present.VersionCheckResult> {
        var mergedArray = Array<Present.VersionCheckResult>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Present.VersionCheckResult? {
        return try Present.VersionCheckResult.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Present.VersionCheckResult {
        return try Present.VersionCheckResult.Builder().mergeFrom(data: data, extensionRegistry:Present.PingRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Present.VersionCheckResult {
        return try Present.VersionCheckResult.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Present.VersionCheckResult {
        return try Present.VersionCheckResult.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Present.VersionCheckResult {
        return try Present.VersionCheckResult.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Present.VersionCheckResult {
        return try Present.VersionCheckResult.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Present.VersionCheckResult {
        return try Present.VersionCheckResult.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "status": return self.status
        case "latestVersionUrl": return self.latestVersionUrl
        default: return nil
        }
    }
}
extension Present.VersionCheckResult.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "status": return self.status
            case "latestVersionUrl": return self.latestVersionUrl
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "status":
                guard let newSubscriptValue = newSubscriptValue as? Present.VersionCheckResult.Status else {
                    return
                }
                self.status = newSubscriptValue
            case "latestVersionUrl":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.latestVersionUrl = newSubscriptValue
            default: return
            }
        }
    }
}

// @@protoc_insertion_point(global_scope)
