/// Generated by the Protocol Buffers 3.2.0 compiler.  DO NOT EDIT!
/// Protobuf-swift version: 3.0.13
/// Source file "core.proto"
/// Syntax "Proto2"

import Foundation
import ProtocolBuffers


public extension Present{}

public extension Present {
    public struct CoreRoot {
        public static let `default` = CoreRoot()
        public var extensionRegistry:ExtensionRegistry

        init() {
            extensionRegistry = ExtensionRegistry()
            registerAllExtensions(registry: extensionRegistry)
        }
        public func registerAllExtensions(registry: ExtensionRegistry) {
        }
    }



    //Enum type declaration start 

    /// Client platform
    public enum Platform:Int32, CustomDebugStringConvertible, CustomStringConvertible, Hashable {
        case unknownPlatform = 0
        case ios = 1
        case android = 2
        case web = 3
        case test = 4
        case `internal` = 5
        case virtual = 6
        public func toString() -> String {
            switch self {
            case .unknownPlatform: return "UNKNOWN_PLATFORM"
            case .ios: return "IOS"
            case .android: return "ANDROID"
            case .web: return "WEB"
            case .test: return "TEST"
            case .`internal`: return "INTERNAL"
            case .virtual: return "VIRTUAL"
            }
        }
        public static func fromString(str:String) throws -> Present.Platform {
            switch str {
            case "UNKNOWN_PLATFORM":    return .unknownPlatform
            case "IOS":    return .ios
            case "ANDROID":    return .android
            case "WEB":    return .web
            case "TEST":    return .test
            case "INTERNAL":    return .`internal`
            case "VIRTUAL":    return .virtual
            default: throw ProtocolBuffersError.invalidProtocolBuffer("Conversion String to Enum has failed.")
            }
        }
        public var debugDescription:String { return getDescription() }
        public var description:String { return getDescription() }
        private func getDescription() -> String { 
            switch self {
            case .unknownPlatform: return ".unknownPlatform"
            case .ios: return ".ios"
            case .android: return ".android"
            case .web: return ".web"
            case .test: return ".test"
            case .`internal`: return ".`internal`"
            case .virtual: return ".virtual"
            }
        }
        public var hashValue:Int {
            return self.rawValue.hashValue
        }
        public static func ==(lhs:Platform, rhs:Platform) -> Bool {
            return lhs.hashValue == rhs.hashValue
        }
    }

    //Enum type declaration end 

    final public class Empty : GeneratedMessage {

        public static func == (lhs: Present.Empty, rhs: Present.Empty) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }

        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> Present.Empty.Builder {
            return Present.Empty.classBuilder() as! Present.Empty.Builder
        }
        public func getBuilder() -> Present.Empty.Builder {
            return classBuilder() as! Present.Empty.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Present.Empty.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Present.Empty.Builder()
        }
        public func toBuilder() throws -> Present.Empty.Builder {
            return try Present.Empty.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Present.Empty) throws -> Present.Empty.Builder {
            return try Present.Empty.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            let jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Present.Empty {
            return try Present.Empty.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Present.Empty {
            return try Present.Empty.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Present.Empty"
        }
        override public func className() -> String {
            return "Present.Empty"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:Present.Empty = Present.Empty()
            public func getMessage() -> Present.Empty {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> Present.Empty.Builder {
                builderResult = Present.Empty()
                return self
            }
            override public func clone() throws -> Present.Empty.Builder {
                return try Present.Empty.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> Present.Empty {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> Present.Empty {
                let returnMe:Present.Empty = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:Present.Empty) throws -> Present.Empty.Builder {
                if other == Present.Empty() {
                    return self
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Present.Empty.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Present.Empty.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Present.Empty.Builder {
                let resultDecodedBuilder = Present.Empty.Builder()
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> Present.Empty.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try Present.Empty.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

    /// A 2D coordinate.
    final public class Coordinates : GeneratedMessage {

        public static func == (lhs: Present.Coordinates, rhs: Present.Coordinates) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasLatitude == rhs.hasLatitude) && (!lhs.hasLatitude || lhs.latitude == rhs.latitude)
            fieldCheck = fieldCheck && (lhs.hasLongitude == rhs.hasLongitude) && (!lhs.hasLongitude || lhs.longitude == rhs.longitude)
            fieldCheck = fieldCheck && (lhs.hasAccuracy == rhs.hasAccuracy) && (!lhs.hasAccuracy || lhs.accuracy == rhs.accuracy)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }

        /// Latitude in degrees.
        public fileprivate(set) var latitude:Double = Double(0)
        public fileprivate(set) var hasLatitude:Bool = false

        /// Longitude in degrees.
        public fileprivate(set) var longitude:Double = Double(0)
        public fileprivate(set) var hasLongitude:Bool = false

        /// Accuracy in m.
        public fileprivate(set) var accuracy:Double = Double(0)
        public fileprivate(set) var hasAccuracy:Bool = false

        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            if !hasLatitude {
                return false
            }
            if !hasLongitude {
                return false
            }
            if !hasAccuracy {
                return false
            }
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if hasLatitude {
                try codedOutputStream.writeDouble(fieldNumber: 1, value:latitude)
            }
            if hasLongitude {
                try codedOutputStream.writeDouble(fieldNumber: 2, value:longitude)
            }
            if hasAccuracy {
                try codedOutputStream.writeDouble(fieldNumber: 3, value:accuracy)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            if hasLatitude {
                serialize_size += latitude.computeDoubleSize(fieldNumber: 1)
            }
            if hasLongitude {
                serialize_size += longitude.computeDoubleSize(fieldNumber: 2)
            }
            if hasAccuracy {
                serialize_size += accuracy.computeDoubleSize(fieldNumber: 3)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> Present.Coordinates.Builder {
            return Present.Coordinates.classBuilder() as! Present.Coordinates.Builder
        }
        public func getBuilder() -> Present.Coordinates.Builder {
            return classBuilder() as! Present.Coordinates.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Present.Coordinates.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Present.Coordinates.Builder()
        }
        public func toBuilder() throws -> Present.Coordinates.Builder {
            return try Present.Coordinates.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Present.Coordinates) throws -> Present.Coordinates.Builder {
            return try Present.Coordinates.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if hasLatitude {
                jsonMap["latitude"] = Double(latitude)
            }
            if hasLongitude {
                jsonMap["longitude"] = Double(longitude)
            }
            if hasAccuracy {
                jsonMap["accuracy"] = Double(accuracy)
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Present.Coordinates {
            return try Present.Coordinates.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Present.Coordinates {
            return try Present.Coordinates.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            if hasLatitude {
                output += "\(indent) latitude: \(latitude) \n"
            }
            if hasLongitude {
                output += "\(indent) longitude: \(longitude) \n"
            }
            if hasAccuracy {
                output += "\(indent) accuracy: \(accuracy) \n"
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasLatitude {
                    hashCode = (hashCode &* 31) &+ latitude.hashValue
                }
                if hasLongitude {
                    hashCode = (hashCode &* 31) &+ longitude.hashValue
                }
                if hasAccuracy {
                    hashCode = (hashCode &* 31) &+ accuracy.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Present.Coordinates"
        }
        override public func className() -> String {
            return "Present.Coordinates"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:Present.Coordinates = Present.Coordinates()
            public func getMessage() -> Present.Coordinates {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            /// Latitude in degrees.
            public var latitude:Double {
                get {
                    return builderResult.latitude
                }
                set (value) {
                    builderResult.hasLatitude = true
                    builderResult.latitude = value
                }
            }
            public var hasLatitude:Bool {
                get {
                    return builderResult.hasLatitude
                }
            }
            @discardableResult
            public func setLatitude(_ value:Double) -> Present.Coordinates.Builder {
                self.latitude = value
                return self
            }
            @discardableResult
            public func clearLatitude() -> Present.Coordinates.Builder{
                builderResult.hasLatitude = false
                builderResult.latitude = Double(0)
                return self
            }
            /// Longitude in degrees.
            public var longitude:Double {
                get {
                    return builderResult.longitude
                }
                set (value) {
                    builderResult.hasLongitude = true
                    builderResult.longitude = value
                }
            }
            public var hasLongitude:Bool {
                get {
                    return builderResult.hasLongitude
                }
            }
            @discardableResult
            public func setLongitude(_ value:Double) -> Present.Coordinates.Builder {
                self.longitude = value
                return self
            }
            @discardableResult
            public func clearLongitude() -> Present.Coordinates.Builder{
                builderResult.hasLongitude = false
                builderResult.longitude = Double(0)
                return self
            }
            /// Accuracy in m.
            public var accuracy:Double {
                get {
                    return builderResult.accuracy
                }
                set (value) {
                    builderResult.hasAccuracy = true
                    builderResult.accuracy = value
                }
            }
            public var hasAccuracy:Bool {
                get {
                    return builderResult.hasAccuracy
                }
            }
            @discardableResult
            public func setAccuracy(_ value:Double) -> Present.Coordinates.Builder {
                self.accuracy = value
                return self
            }
            @discardableResult
            public func clearAccuracy() -> Present.Coordinates.Builder{
                builderResult.hasAccuracy = false
                builderResult.accuracy = Double(0)
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> Present.Coordinates.Builder {
                builderResult = Present.Coordinates()
                return self
            }
            override public func clone() throws -> Present.Coordinates.Builder {
                return try Present.Coordinates.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> Present.Coordinates {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> Present.Coordinates {
                let returnMe:Present.Coordinates = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:Present.Coordinates) throws -> Present.Coordinates.Builder {
                if other == Present.Coordinates() {
                    return self
                }
                if other.hasLatitude {
                    latitude = other.latitude
                }
                if other.hasLongitude {
                    longitude = other.longitude
                }
                if other.hasAccuracy {
                    accuracy = other.accuracy
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Present.Coordinates.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Present.Coordinates.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 9:
                        latitude = try codedInputStream.readDouble()

                    case 17:
                        longitude = try codedInputStream.readDouble()

                    case 25:
                        accuracy = try codedInputStream.readDouble()

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Present.Coordinates.Builder {
                let resultDecodedBuilder = Present.Coordinates.Builder()
                if let jsonValueLatitude = jsonMap["latitude"] as? Double {
                    resultDecodedBuilder.latitude = Double(jsonValueLatitude)
                } else if let jsonValueLatitude = jsonMap["latitude"] as? String {
                    resultDecodedBuilder.latitude = Double(jsonValueLatitude)!
                }
                if let jsonValueLongitude = jsonMap["longitude"] as? Double {
                    resultDecodedBuilder.longitude = Double(jsonValueLongitude)
                } else if let jsonValueLongitude = jsonMap["longitude"] as? String {
                    resultDecodedBuilder.longitude = Double(jsonValueLongitude)!
                }
                if let jsonValueAccuracy = jsonMap["accuracy"] as? Double {
                    resultDecodedBuilder.accuracy = Double(jsonValueAccuracy)
                } else if let jsonValueAccuracy = jsonMap["accuracy"] as? String {
                    resultDecodedBuilder.accuracy = Double(jsonValueAccuracy)!
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> Present.Coordinates.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try Present.Coordinates.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

    final public class EmailAddress : GeneratedMessage {

        public static func == (lhs: Present.EmailAddress, rhs: Present.EmailAddress) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasEmail == rhs.hasEmail) && (!lhs.hasEmail || lhs.email == rhs.email)
            fieldCheck = fieldCheck && (lhs.hasLabel == rhs.hasLabel) && (!lhs.hasLabel || lhs.label == rhs.label)
            fieldCheck = fieldCheck && (lhs.hasName == rhs.hasName) && (!lhs.hasName || lhs.name == rhs.name)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }

        /// Email address
        public fileprivate(set) var email:String = ""
        public fileprivate(set) var hasEmail:Bool = false

        /// Optional external system's label for this email (e.g. "home", "work", etc.)
        public fileprivate(set) var label:String = ""
        public fileprivate(set) var hasLabel:Bool = false

        /// Display name
        public fileprivate(set) var name:String = ""
        public fileprivate(set) var hasName:Bool = false

        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            if !hasEmail {
                return false
            }
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if hasEmail {
                try codedOutputStream.writeString(fieldNumber: 1, value:email)
            }
            if hasLabel {
                try codedOutputStream.writeString(fieldNumber: 2, value:label)
            }
            if hasName {
                try codedOutputStream.writeString(fieldNumber: 3, value:name)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            if hasEmail {
                serialize_size += email.computeStringSize(fieldNumber: 1)
            }
            if hasLabel {
                serialize_size += label.computeStringSize(fieldNumber: 2)
            }
            if hasName {
                serialize_size += name.computeStringSize(fieldNumber: 3)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> Present.EmailAddress.Builder {
            return Present.EmailAddress.classBuilder() as! Present.EmailAddress.Builder
        }
        public func getBuilder() -> Present.EmailAddress.Builder {
            return classBuilder() as! Present.EmailAddress.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Present.EmailAddress.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Present.EmailAddress.Builder()
        }
        public func toBuilder() throws -> Present.EmailAddress.Builder {
            return try Present.EmailAddress.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Present.EmailAddress) throws -> Present.EmailAddress.Builder {
            return try Present.EmailAddress.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if hasEmail {
                jsonMap["email"] = email
            }
            if hasLabel {
                jsonMap["label"] = label
            }
            if hasName {
                jsonMap["name"] = name
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Present.EmailAddress {
            return try Present.EmailAddress.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Present.EmailAddress {
            return try Present.EmailAddress.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            if hasEmail {
                output += "\(indent) email: \(email) \n"
            }
            if hasLabel {
                output += "\(indent) label: \(label) \n"
            }
            if hasName {
                output += "\(indent) name: \(name) \n"
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasEmail {
                    hashCode = (hashCode &* 31) &+ email.hashValue
                }
                if hasLabel {
                    hashCode = (hashCode &* 31) &+ label.hashValue
                }
                if hasName {
                    hashCode = (hashCode &* 31) &+ name.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Present.EmailAddress"
        }
        override public func className() -> String {
            return "Present.EmailAddress"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:Present.EmailAddress = Present.EmailAddress()
            public func getMessage() -> Present.EmailAddress {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            /// Email address
            public var email:String {
                get {
                    return builderResult.email
                }
                set (value) {
                    builderResult.hasEmail = true
                    builderResult.email = value
                }
            }
            public var hasEmail:Bool {
                get {
                    return builderResult.hasEmail
                }
            }
            @discardableResult
            public func setEmail(_ value:String) -> Present.EmailAddress.Builder {
                self.email = value
                return self
            }
            @discardableResult
            public func clearEmail() -> Present.EmailAddress.Builder{
                builderResult.hasEmail = false
                builderResult.email = ""
                return self
            }
            /// Optional external system's label for this email (e.g. "home", "work", etc.)
            public var label:String {
                get {
                    return builderResult.label
                }
                set (value) {
                    builderResult.hasLabel = true
                    builderResult.label = value
                }
            }
            public var hasLabel:Bool {
                get {
                    return builderResult.hasLabel
                }
            }
            @discardableResult
            public func setLabel(_ value:String) -> Present.EmailAddress.Builder {
                self.label = value
                return self
            }
            @discardableResult
            public func clearLabel() -> Present.EmailAddress.Builder{
                builderResult.hasLabel = false
                builderResult.label = ""
                return self
            }
            /// Display name
            public var name:String {
                get {
                    return builderResult.name
                }
                set (value) {
                    builderResult.hasName = true
                    builderResult.name = value
                }
            }
            public var hasName:Bool {
                get {
                    return builderResult.hasName
                }
            }
            @discardableResult
            public func setName(_ value:String) -> Present.EmailAddress.Builder {
                self.name = value
                return self
            }
            @discardableResult
            public func clearName() -> Present.EmailAddress.Builder{
                builderResult.hasName = false
                builderResult.name = ""
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> Present.EmailAddress.Builder {
                builderResult = Present.EmailAddress()
                return self
            }
            override public func clone() throws -> Present.EmailAddress.Builder {
                return try Present.EmailAddress.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> Present.EmailAddress {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> Present.EmailAddress {
                let returnMe:Present.EmailAddress = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:Present.EmailAddress) throws -> Present.EmailAddress.Builder {
                if other == Present.EmailAddress() {
                    return self
                }
                if other.hasEmail {
                    email = other.email
                }
                if other.hasLabel {
                    label = other.label
                }
                if other.hasName {
                    name = other.name
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Present.EmailAddress.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Present.EmailAddress.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 10:
                        email = try codedInputStream.readString()

                    case 18:
                        label = try codedInputStream.readString()

                    case 26:
                        name = try codedInputStream.readString()

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Present.EmailAddress.Builder {
                let resultDecodedBuilder = Present.EmailAddress.Builder()
                if let jsonValueEmail = jsonMap["email"] as? String {
                    resultDecodedBuilder.email = jsonValueEmail
                }
                if let jsonValueLabel = jsonMap["label"] as? String {
                    resultDecodedBuilder.label = jsonValueLabel
                }
                if let jsonValueName = jsonMap["name"] as? String {
                    resultDecodedBuilder.name = jsonValueName
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> Present.EmailAddress.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try Present.EmailAddress.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

    final public class City : GeneratedMessage {

        public static func == (lhs: Present.City, rhs: Present.City) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasName == rhs.hasName) && (!lhs.hasName || lhs.name == rhs.name)
            fieldCheck = fieldCheck && (lhs.hasLocation == rhs.hasLocation) && (!lhs.hasLocation || lhs.location == rhs.location)
            fieldCheck = fieldCheck && (lhs.hasRadius == rhs.hasRadius) && (!lhs.hasRadius || lhs.radius == rhs.radius)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }

        /// Name of city.
        public fileprivate(set) var name:String = ""
        public fileprivate(set) var hasName:Bool = false

        public fileprivate(set) var location:Present.Coordinates!
        public fileprivate(set) var hasLocation:Bool = false
        /// Radius to display in m.
        public fileprivate(set) var radius:Double = Double(0)
        public fileprivate(set) var hasRadius:Bool = false

        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            if !hasName {
                return false
            }
            if !hasLocation {
                return false
            }
            if !hasRadius {
                return false
            }
            if !location.isInitialized() {
                return false
            }
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if hasName {
                try codedOutputStream.writeString(fieldNumber: 1, value:name)
            }
            if hasLocation {
                try codedOutputStream.writeMessage(fieldNumber: 2, value:location)
            }
            if hasRadius {
                try codedOutputStream.writeDouble(fieldNumber: 3, value:radius)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            if hasName {
                serialize_size += name.computeStringSize(fieldNumber: 1)
            }
            if hasLocation {
                if let varSizelocation = location?.computeMessageSize(fieldNumber: 2) {
                    serialize_size += varSizelocation
                }
            }
            if hasRadius {
                serialize_size += radius.computeDoubleSize(fieldNumber: 3)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> Present.City.Builder {
            return Present.City.classBuilder() as! Present.City.Builder
        }
        public func getBuilder() -> Present.City.Builder {
            return classBuilder() as! Present.City.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Present.City.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Present.City.Builder()
        }
        public func toBuilder() throws -> Present.City.Builder {
            return try Present.City.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Present.City) throws -> Present.City.Builder {
            return try Present.City.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if hasName {
                jsonMap["name"] = name
            }
            if hasLocation {
                jsonMap["location"] = try location.encode()
            }
            if hasRadius {
                jsonMap["radius"] = Double(radius)
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Present.City {
            return try Present.City.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Present.City {
            return try Present.City.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            if hasName {
                output += "\(indent) name: \(name) \n"
            }
            if hasLocation {
                output += "\(indent) location {\n"
                if let outDescLocation = location {
                    output += try outDescLocation.getDescription(indent: "\(indent)  ")
                }
                output += "\(indent) }\n"
            }
            if hasRadius {
                output += "\(indent) radius: \(radius) \n"
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasName {
                    hashCode = (hashCode &* 31) &+ name.hashValue
                }
                if hasLocation {
                    if let hashValuelocation = location?.hashValue {
                        hashCode = (hashCode &* 31) &+ hashValuelocation
                    }
                }
                if hasRadius {
                    hashCode = (hashCode &* 31) &+ radius.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Present.City"
        }
        override public func className() -> String {
            return "Present.City"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:Present.City = Present.City()
            public func getMessage() -> Present.City {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            /// Name of city.
            public var name:String {
                get {
                    return builderResult.name
                }
                set (value) {
                    builderResult.hasName = true
                    builderResult.name = value
                }
            }
            public var hasName:Bool {
                get {
                    return builderResult.hasName
                }
            }
            @discardableResult
            public func setName(_ value:String) -> Present.City.Builder {
                self.name = value
                return self
            }
            @discardableResult
            public func clearName() -> Present.City.Builder{
                builderResult.hasName = false
                builderResult.name = ""
                return self
            }
            /// Center of city.
            public var location:Present.Coordinates! {
                get {
                    if locationBuilder_ != nil {
                        builderResult.location = locationBuilder_.getMessage()
                    }
                    return builderResult.location
                }
                set (value) {
                    builderResult.hasLocation = true
                    builderResult.location = value
                }
            }
            public var hasLocation:Bool {
                get {
                    return builderResult.hasLocation
                }
            }
            fileprivate var locationBuilder_:Present.Coordinates.Builder! {
                didSet {
                    builderResult.hasLocation = true
                }
            }
            public func getLocationBuilder() -> Present.Coordinates.Builder {
                if locationBuilder_ == nil {
                    locationBuilder_ = Present.Coordinates.Builder()
                    builderResult.location = locationBuilder_.getMessage()
                    if location != nil {
                        try! locationBuilder_.mergeFrom(other: location)
                    }
                }
                return locationBuilder_
            }
            @discardableResult
            public func setLocation(_ value:Present.Coordinates!) -> Present.City.Builder {
                self.location = value
                return self
            }
            @discardableResult
            public func mergeLocation(value:Present.Coordinates) throws -> Present.City.Builder {
                if builderResult.hasLocation {
                    builderResult.location = try Present.Coordinates.builderWithPrototype(prototype:builderResult.location).mergeFrom(other: value).buildPartial()
                } else {
                    builderResult.location = value
                }
                builderResult.hasLocation = true
                return self
            }
            @discardableResult
            public func clearLocation() -> Present.City.Builder {
                locationBuilder_ = nil
                builderResult.hasLocation = false
                builderResult.location = nil
                return self
            }
            /// Radius to display in m.
            public var radius:Double {
                get {
                    return builderResult.radius
                }
                set (value) {
                    builderResult.hasRadius = true
                    builderResult.radius = value
                }
            }
            public var hasRadius:Bool {
                get {
                    return builderResult.hasRadius
                }
            }
            @discardableResult
            public func setRadius(_ value:Double) -> Present.City.Builder {
                self.radius = value
                return self
            }
            @discardableResult
            public func clearRadius() -> Present.City.Builder{
                builderResult.hasRadius = false
                builderResult.radius = Double(0)
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> Present.City.Builder {
                builderResult = Present.City()
                return self
            }
            override public func clone() throws -> Present.City.Builder {
                return try Present.City.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> Present.City {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> Present.City {
                let returnMe:Present.City = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:Present.City) throws -> Present.City.Builder {
                if other == Present.City() {
                    return self
                }
                if other.hasName {
                    name = other.name
                }
                if (other.hasLocation) {
                    try mergeLocation(value: other.location)
                }
                if other.hasRadius {
                    radius = other.radius
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Present.City.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Present.City.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 10:
                        name = try codedInputStream.readString()

                    case 18:
                        let subBuilder:Present.Coordinates.Builder = Present.Coordinates.Builder()
                        if hasLocation {
                            try subBuilder.mergeFrom(other: location)
                        }
                        try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                        location = subBuilder.buildPartial()

                    case 25:
                        radius = try codedInputStream.readDouble()

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Present.City.Builder {
                let resultDecodedBuilder = Present.City.Builder()
                if let jsonValueName = jsonMap["name"] as? String {
                    resultDecodedBuilder.name = jsonValueName
                }
                if let jsonValueLocation = jsonMap["location"] as? Dictionary<String,Any> {
                    resultDecodedBuilder.location = try Present.Coordinates.Builder.decodeToBuilder(jsonMap:jsonValueLocation).build()

                }
                if let jsonValueRadius = jsonMap["radius"] as? Double {
                    resultDecodedBuilder.radius = Double(jsonValueRadius)
                } else if let jsonValueRadius = jsonMap["radius"] as? String {
                    resultDecodedBuilder.radius = Double(jsonValueRadius)!
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> Present.City.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try Present.City.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

    /// A space is a collection of circles.
    final public class SpaceResponse : GeneratedMessage {

        public static func == (lhs: Present.SpaceResponse, rhs: Present.SpaceResponse) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasId == rhs.hasId) && (!lhs.hasId || lhs.id == rhs.id)
            fieldCheck = fieldCheck && (lhs.hasName == rhs.hasName) && (!lhs.hasName || lhs.name == rhs.name)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }

        public fileprivate(set) var id:String = ""
        public fileprivate(set) var hasId:Bool = false

        public fileprivate(set) var name:String = ""
        public fileprivate(set) var hasName:Bool = false

        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            if !hasId {
                return false
            }
            if !hasName {
                return false
            }
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if hasId {
                try codedOutputStream.writeString(fieldNumber: 1, value:id)
            }
            if hasName {
                try codedOutputStream.writeString(fieldNumber: 2, value:name)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            if hasId {
                serialize_size += id.computeStringSize(fieldNumber: 1)
            }
            if hasName {
                serialize_size += name.computeStringSize(fieldNumber: 2)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> Present.SpaceResponse.Builder {
            return Present.SpaceResponse.classBuilder() as! Present.SpaceResponse.Builder
        }
        public func getBuilder() -> Present.SpaceResponse.Builder {
            return classBuilder() as! Present.SpaceResponse.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Present.SpaceResponse.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Present.SpaceResponse.Builder()
        }
        public func toBuilder() throws -> Present.SpaceResponse.Builder {
            return try Present.SpaceResponse.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Present.SpaceResponse) throws -> Present.SpaceResponse.Builder {
            return try Present.SpaceResponse.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if hasId {
                jsonMap["id"] = id
            }
            if hasName {
                jsonMap["name"] = name
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Present.SpaceResponse {
            return try Present.SpaceResponse.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Present.SpaceResponse {
            return try Present.SpaceResponse.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            if hasId {
                output += "\(indent) id: \(id) \n"
            }
            if hasName {
                output += "\(indent) name: \(name) \n"
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasId {
                    hashCode = (hashCode &* 31) &+ id.hashValue
                }
                if hasName {
                    hashCode = (hashCode &* 31) &+ name.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Present.SpaceResponse"
        }
        override public func className() -> String {
            return "Present.SpaceResponse"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:Present.SpaceResponse = Present.SpaceResponse()
            public func getMessage() -> Present.SpaceResponse {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            public var id:String {
                get {
                    return builderResult.id
                }
                set (value) {
                    builderResult.hasId = true
                    builderResult.id = value
                }
            }
            public var hasId:Bool {
                get {
                    return builderResult.hasId
                }
            }
            @discardableResult
            public func setId(_ value:String) -> Present.SpaceResponse.Builder {
                self.id = value
                return self
            }
            @discardableResult
            public func clearId() -> Present.SpaceResponse.Builder{
                builderResult.hasId = false
                builderResult.id = ""
                return self
            }
            public var name:String {
                get {
                    return builderResult.name
                }
                set (value) {
                    builderResult.hasName = true
                    builderResult.name = value
                }
            }
            public var hasName:Bool {
                get {
                    return builderResult.hasName
                }
            }
            @discardableResult
            public func setName(_ value:String) -> Present.SpaceResponse.Builder {
                self.name = value
                return self
            }
            @discardableResult
            public func clearName() -> Present.SpaceResponse.Builder{
                builderResult.hasName = false
                builderResult.name = ""
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> Present.SpaceResponse.Builder {
                builderResult = Present.SpaceResponse()
                return self
            }
            override public func clone() throws -> Present.SpaceResponse.Builder {
                return try Present.SpaceResponse.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> Present.SpaceResponse {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> Present.SpaceResponse {
                let returnMe:Present.SpaceResponse = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:Present.SpaceResponse) throws -> Present.SpaceResponse.Builder {
                if other == Present.SpaceResponse() {
                    return self
                }
                if other.hasId {
                    id = other.id
                }
                if other.hasName {
                    name = other.name
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Present.SpaceResponse.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Present.SpaceResponse.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 10:
                        id = try codedInputStream.readString()

                    case 18:
                        name = try codedInputStream.readString()

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Present.SpaceResponse.Builder {
                let resultDecodedBuilder = Present.SpaceResponse.Builder()
                if let jsonValueId = jsonMap["id"] as? String {
                    resultDecodedBuilder.id = jsonValueId
                }
                if let jsonValueName = jsonMap["name"] as? String {
                    resultDecodedBuilder.name = jsonValueName
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> Present.SpaceResponse.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try Present.SpaceResponse.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

}
extension Present.Empty: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Present.Empty> {
        var mergedArray = Array<Present.Empty>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Present.Empty? {
        return try Present.Empty.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Present.Empty {
        return try Present.Empty.Builder().mergeFrom(data: data, extensionRegistry:Present.CoreRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Present.Empty {
        return try Present.Empty.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Present.Empty {
        return try Present.Empty.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Present.Empty {
        return try Present.Empty.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Present.Empty {
        return try Present.Empty.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Present.Empty {
        return try Present.Empty.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        return nil
    }
}
extension Present.Empty.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { return nil }
        set { }
    }
}
extension Present.Coordinates: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Present.Coordinates> {
        var mergedArray = Array<Present.Coordinates>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Present.Coordinates? {
        return try Present.Coordinates.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Present.Coordinates {
        return try Present.Coordinates.Builder().mergeFrom(data: data, extensionRegistry:Present.CoreRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Present.Coordinates {
        return try Present.Coordinates.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Present.Coordinates {
        return try Present.Coordinates.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Present.Coordinates {
        return try Present.Coordinates.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Present.Coordinates {
        return try Present.Coordinates.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Present.Coordinates {
        return try Present.Coordinates.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "latitude": return self.latitude
        case "longitude": return self.longitude
        case "accuracy": return self.accuracy
        default: return nil
        }
    }
}
extension Present.Coordinates.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "latitude": return self.latitude
            case "longitude": return self.longitude
            case "accuracy": return self.accuracy
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "latitude":
                guard let newSubscriptValue = newSubscriptValue as? Double else {
                    return
                }
                self.latitude = newSubscriptValue
            case "longitude":
                guard let newSubscriptValue = newSubscriptValue as? Double else {
                    return
                }
                self.longitude = newSubscriptValue
            case "accuracy":
                guard let newSubscriptValue = newSubscriptValue as? Double else {
                    return
                }
                self.accuracy = newSubscriptValue
            default: return
            }
        }
    }
}
extension Present.EmailAddress: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Present.EmailAddress> {
        var mergedArray = Array<Present.EmailAddress>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Present.EmailAddress? {
        return try Present.EmailAddress.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Present.EmailAddress {
        return try Present.EmailAddress.Builder().mergeFrom(data: data, extensionRegistry:Present.CoreRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Present.EmailAddress {
        return try Present.EmailAddress.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Present.EmailAddress {
        return try Present.EmailAddress.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Present.EmailAddress {
        return try Present.EmailAddress.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Present.EmailAddress {
        return try Present.EmailAddress.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Present.EmailAddress {
        return try Present.EmailAddress.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "email": return self.email
        case "label": return self.label
        case "name": return self.name
        default: return nil
        }
    }
}
extension Present.EmailAddress.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "email": return self.email
            case "label": return self.label
            case "name": return self.name
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "email":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.email = newSubscriptValue
            case "label":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.label = newSubscriptValue
            case "name":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.name = newSubscriptValue
            default: return
            }
        }
    }
}
extension Present.City: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Present.City> {
        var mergedArray = Array<Present.City>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Present.City? {
        return try Present.City.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Present.City {
        return try Present.City.Builder().mergeFrom(data: data, extensionRegistry:Present.CoreRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Present.City {
        return try Present.City.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Present.City {
        return try Present.City.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Present.City {
        return try Present.City.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Present.City {
        return try Present.City.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Present.City {
        return try Present.City.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "name": return self.name
        case "location": return self.location
        case "radius": return self.radius
        default: return nil
        }
    }
}
extension Present.City.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "name": return self.name
            case "location": return self.location
            case "radius": return self.radius
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "name":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.name = newSubscriptValue
            case "location":
                guard let newSubscriptValue = newSubscriptValue as? Present.Coordinates else {
                    return
                }
                self.location = newSubscriptValue
            case "radius":
                guard let newSubscriptValue = newSubscriptValue as? Double else {
                    return
                }
                self.radius = newSubscriptValue
            default: return
            }
        }
    }
}
extension Present.SpaceResponse: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Present.SpaceResponse> {
        var mergedArray = Array<Present.SpaceResponse>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Present.SpaceResponse? {
        return try Present.SpaceResponse.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Present.SpaceResponse {
        return try Present.SpaceResponse.Builder().mergeFrom(data: data, extensionRegistry:Present.CoreRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Present.SpaceResponse {
        return try Present.SpaceResponse.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Present.SpaceResponse {
        return try Present.SpaceResponse.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Present.SpaceResponse {
        return try Present.SpaceResponse.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Present.SpaceResponse {
        return try Present.SpaceResponse.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Present.SpaceResponse {
        return try Present.SpaceResponse.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "id": return self.id
        case "name": return self.name
        default: return nil
        }
    }
}
extension Present.SpaceResponse.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "id": return self.id
            case "name": return self.name
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "id":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.id = newSubscriptValue
            case "name":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.name = newSubscriptValue
            default: return
            }
        }
    }
}

// @@protoc_insertion_point(global_scope)
