/// Generated by the Protocol Buffers 3.2.0 compiler.  DO NOT EDIT!
/// Protobuf-swift version: 3.0.13
/// Source file "messaging.proto"
/// Syntax "Proto2"

import Foundation
import ProtocolBuffers


public extension Present{}

public extension Present {
    public struct MessagingRoot {
        public static let `default` = MessagingRoot()
        public var extensionRegistry:ExtensionRegistry

        init() {
            extensionRegistry = ExtensionRegistry()
            registerAllExtensions(registry: extensionRegistry)
            Present.CoreRoot.default.registerAllExtensions(registry: extensionRegistry)
            Present.ContentRoot.default.registerAllExtensions(registry: extensionRegistry)
            Present.UserRoot.default.registerAllExtensions(registry: extensionRegistry)
        }
        public func registerAllExtensions(registry: ExtensionRegistry) {
        }
    }

    final public class ChatsResponse : GeneratedMessage {

        public static func == (lhs: Present.ChatsResponse, rhs: Present.ChatsResponse) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.chats == rhs.chats)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }

        public fileprivate(set) var chats:Array<Present.Empty>  = Array<Present.Empty>()
        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            for oneElementChats in chats {
                  try codedOutputStream.writeMessage(fieldNumber: 1, value:oneElementChats)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            for oneElementChats in chats {
                serialize_size += oneElementChats.computeMessageSize(fieldNumber: 1)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> Present.ChatsResponse.Builder {
            return Present.ChatsResponse.classBuilder() as! Present.ChatsResponse.Builder
        }
        public func getBuilder() -> Present.ChatsResponse.Builder {
            return classBuilder() as! Present.ChatsResponse.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Present.ChatsResponse.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Present.ChatsResponse.Builder()
        }
        public func toBuilder() throws -> Present.ChatsResponse.Builder {
            return try Present.ChatsResponse.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Present.ChatsResponse) throws -> Present.ChatsResponse.Builder {
            return try Present.ChatsResponse.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if !chats.isEmpty {
                var jsonArrayChats:Array<Dictionary<String,Any>> = []
                for oneValueChats in chats {
                    let ecodedMessageChats = try oneValueChats.encode()
                    jsonArrayChats.append(ecodedMessageChats)
                }
                jsonMap["chats"] = jsonArrayChats
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Present.ChatsResponse {
            return try Present.ChatsResponse.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Present.ChatsResponse {
            return try Present.ChatsResponse.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            var chatsElementIndex:Int = 0
            for oneElementChats in chats {
                output += "\(indent) chats[\(chatsElementIndex)] {\n"
                output += try oneElementChats.getDescription(indent: "\(indent)  ")
                output += "\(indent)}\n"
                chatsElementIndex += 1
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                for oneElementChats in chats {
                    hashCode = (hashCode &* 31) &+ oneElementChats.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Present.ChatsResponse"
        }
        override public func className() -> String {
            return "Present.ChatsResponse"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:Present.ChatsResponse = Present.ChatsResponse()
            public func getMessage() -> Present.ChatsResponse {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            public var chats:Array<Present.Empty> {
                get {
                    return builderResult.chats
                }
                set (value) {
                    builderResult.chats = value
                }
            }
            @discardableResult
            public func setChats(_ value:Array<Present.Empty>) -> Present.ChatsResponse.Builder {
                self.chats = value
                return self
            }
            @discardableResult
            public func clearChats() -> Present.ChatsResponse.Builder {
                builderResult.chats.removeAll(keepingCapacity: false)
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> Present.ChatsResponse.Builder {
                builderResult = Present.ChatsResponse()
                return self
            }
            override public func clone() throws -> Present.ChatsResponse.Builder {
                return try Present.ChatsResponse.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> Present.ChatsResponse {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> Present.ChatsResponse {
                let returnMe:Present.ChatsResponse = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:Present.ChatsResponse) throws -> Present.ChatsResponse.Builder {
                if other == Present.ChatsResponse() {
                    return self
                }
                if !other.chats.isEmpty  {
                     builderResult.chats += other.chats
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Present.ChatsResponse.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Present.ChatsResponse.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 10:
                        let subBuilder = Present.Empty.Builder()
                        try codedInputStream.readMessage(builder: subBuilder,extensionRegistry:extensionRegistry)
                        chats.append(subBuilder.buildPartial())

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Present.ChatsResponse.Builder {
                let resultDecodedBuilder = Present.ChatsResponse.Builder()
                if let jsonValueChats = jsonMap["chats"] as? Array<Dictionary<String,Any>> {
                    var jsonArrayChats:Array<Present.Empty> = []
                    for oneValueChats in jsonValueChats {
                        let messageFromStringChats = try Present.Empty.Builder.decodeToBuilder(jsonMap:oneValueChats).build()

                        jsonArrayChats.append(messageFromStringChats)
                    }
                    resultDecodedBuilder.chats = jsonArrayChats
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> Present.ChatsResponse.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try Present.ChatsResponse.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

}
extension Present.ChatsResponse: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Present.ChatsResponse> {
        var mergedArray = Array<Present.ChatsResponse>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Present.ChatsResponse? {
        return try Present.ChatsResponse.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Present.ChatsResponse {
        return try Present.ChatsResponse.Builder().mergeFrom(data: data, extensionRegistry:Present.MessagingRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Present.ChatsResponse {
        return try Present.ChatsResponse.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Present.ChatsResponse {
        return try Present.ChatsResponse.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Present.ChatsResponse {
        return try Present.ChatsResponse.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Present.ChatsResponse {
        return try Present.ChatsResponse.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Present.ChatsResponse {
        return try Present.ChatsResponse.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "chats": return self.chats
        default: return nil
        }
    }
}
extension Present.ChatsResponse.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "chats": return self.chats
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "chats":
                guard let newSubscriptValue = newSubscriptValue as? Array<Present.Empty> else {
                    return
                }
                self.chats = newSubscriptValue
            default: return
            }
        }
    }
}

// @@protoc_insertion_point(global_scope)
