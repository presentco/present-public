/// Generated by the Protocol Buffers 3.2.0 compiler.  DO NOT EDIT!
/// Protobuf-swift version: 3.0.13
/// Source file "headers.proto"
/// Syntax "Proto2"

import Foundation
import ProtocolBuffers


public extension Present{}

public extension Present {
    public struct HeadersRoot {
        public static let `default` = HeadersRoot()
        public var extensionRegistry:ExtensionRegistry

        init() {
            extensionRegistry = ExtensionRegistry()
            registerAllExtensions(registry: extensionRegistry)
            Present.CoreRoot.default.registerAllExtensions(registry: extensionRegistry)
        }
        public func registerAllExtensions(registry: ExtensionRegistry) {
        }
    }

    /// Header sent by clients with all requests.
    final public class RequestHeader : GeneratedMessage {

        public static func == (lhs: Present.RequestHeader, rhs: Present.RequestHeader) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasClientUuid == rhs.hasClientUuid) && (!lhs.hasClientUuid || lhs.clientUuid == rhs.clientUuid)
            fieldCheck = fieldCheck && (lhs.hasRequestUuid == rhs.hasRequestUuid) && (!lhs.hasRequestUuid || lhs.requestUuid == rhs.requestUuid)
            fieldCheck = fieldCheck && (lhs.hasAuthorizationKey == rhs.hasAuthorizationKey) && (!lhs.hasAuthorizationKey || lhs.authorizationKey == rhs.authorizationKey)
            fieldCheck = fieldCheck && (lhs.hasPlatform == rhs.hasPlatform) && (!lhs.hasPlatform || lhs.platform == rhs.platform)
            fieldCheck = fieldCheck && (lhs.hasApiVersion == rhs.hasApiVersion) && (!lhs.hasApiVersion || lhs.apiVersion == rhs.apiVersion)
            fieldCheck = fieldCheck && (lhs.hasClientVersion == rhs.hasClientVersion) && (!lhs.hasClientVersion || lhs.clientVersion == rhs.clientVersion)
            fieldCheck = fieldCheck && (lhs.hasPlatformVersion == rhs.hasPlatformVersion) && (!lhs.hasPlatformVersion || lhs.platformVersion == rhs.platformVersion)
            fieldCheck = fieldCheck && (lhs.hasLocation == rhs.hasLocation) && (!lhs.hasLocation || lhs.location == rhs.location)
            fieldCheck = fieldCheck && (lhs.hasDeviceName == rhs.hasDeviceName) && (!lhs.hasDeviceName || lhs.deviceName == rhs.deviceName)
            fieldCheck = fieldCheck && (lhs.hasSelectedLocation == rhs.hasSelectedLocation) && (!lhs.hasSelectedLocation || lhs.selectedLocation == rhs.selectedLocation)
            fieldCheck = fieldCheck && (lhs.hasSpaceId == rhs.hasSpaceId) && (!lhs.hasSpaceId || lhs.spaceId == rhs.spaceId)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }

        /// Identifies an installation of the app. Generated the first time the app runs.
        public fileprivate(set) var clientUuid:String = ""
        public fileprivate(set) var hasClientUuid:Bool = false

        /// Identifies a request. Can be used in handling duplicate requests.
        public fileprivate(set) var requestUuid:String = ""
        public fileprivate(set) var hasRequestUuid:Bool = false

        /// Required to authorize requests. It's not possible for us to completely block unauthorized
        /// API clients, but much like iTunes DRM, this raises the bar quite a bit. Computed as:
        /// base64(sha256(global key | client UUID | request UUID))
        public fileprivate(set) var authorizationKey:String = ""
        public fileprivate(set) var hasAuthorizationKey:Bool = false

        public fileprivate(set) var platform:Present.Platform = Present.Platform.unknownPlatform
        public fileprivate(set) var hasPlatform:Bool = false
        /// The client app's desired API version.
        public fileprivate(set) var apiVersion:UInt32 = UInt32(0)
        public fileprivate(set) var hasApiVersion:Bool = false

        /// Version of the client app.
        public fileprivate(set) var clientVersion:String = ""
        public fileprivate(set) var hasClientVersion:Bool = false

        /// Version of the client OS.
        public fileprivate(set) var platformVersion:String = ""
        public fileprivate(set) var hasPlatformVersion:Bool = false

        public fileprivate(set) var location:Present.Coordinates!
        public fileprivate(set) var hasLocation:Bool = false
        public fileprivate(set) var selectedLocation:Present.Coordinates!
        public fileprivate(set) var hasSelectedLocation:Bool = false
        /// Used for debugging.
        public fileprivate(set) var deviceName:String = ""
        public fileprivate(set) var hasDeviceName:Bool = false

        /// The user's selected space. Will be null coming from old clients.
        public fileprivate(set) var spaceId:String = ""
        public fileprivate(set) var hasSpaceId:Bool = false

        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            if !hasClientUuid {
                return false
            }
            if !hasRequestUuid {
                return false
            }
            if !hasAuthorizationKey {
                return false
            }
            if !hasPlatform {
                return false
            }
            if !hasApiVersion {
                return false
            }
            if hasLocation {
                if !location.isInitialized() {
                    return false
                }
            }
            if hasSelectedLocation {
                if !selectedLocation.isInitialized() {
                    return false
                }
            }
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if hasClientUuid {
                try codedOutputStream.writeString(fieldNumber: 1, value:clientUuid)
            }
            if hasRequestUuid {
                try codedOutputStream.writeString(fieldNumber: 2, value:requestUuid)
            }
            if hasAuthorizationKey {
                try codedOutputStream.writeString(fieldNumber: 4, value:authorizationKey)
            }
            if hasPlatform {
                try codedOutputStream.writeEnum(fieldNumber: 5, value:platform.rawValue)
            }
            if hasApiVersion {
                try codedOutputStream.writeUInt32(fieldNumber: 6, value:apiVersion)
            }
            if hasClientVersion {
                try codedOutputStream.writeString(fieldNumber: 7, value:clientVersion)
            }
            if hasPlatformVersion {
                try codedOutputStream.writeString(fieldNumber: 8, value:platformVersion)
            }
            if hasLocation {
                try codedOutputStream.writeMessage(fieldNumber: 9, value:location)
            }
            if hasDeviceName {
                try codedOutputStream.writeString(fieldNumber: 10, value:deviceName)
            }
            if hasSelectedLocation {
                try codedOutputStream.writeMessage(fieldNumber: 11, value:selectedLocation)
            }
            if hasSpaceId {
                try codedOutputStream.writeString(fieldNumber: 12, value:spaceId)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            if hasClientUuid {
                serialize_size += clientUuid.computeStringSize(fieldNumber: 1)
            }
            if hasRequestUuid {
                serialize_size += requestUuid.computeStringSize(fieldNumber: 2)
            }
            if hasAuthorizationKey {
                serialize_size += authorizationKey.computeStringSize(fieldNumber: 4)
            }
            if (hasPlatform) {
                serialize_size += platform.rawValue.computeEnumSize(fieldNumber: 5)
            }
            if hasApiVersion {
                serialize_size += apiVersion.computeUInt32Size(fieldNumber: 6)
            }
            if hasClientVersion {
                serialize_size += clientVersion.computeStringSize(fieldNumber: 7)
            }
            if hasPlatformVersion {
                serialize_size += platformVersion.computeStringSize(fieldNumber: 8)
            }
            if hasLocation {
                if let varSizelocation = location?.computeMessageSize(fieldNumber: 9) {
                    serialize_size += varSizelocation
                }
            }
            if hasDeviceName {
                serialize_size += deviceName.computeStringSize(fieldNumber: 10)
            }
            if hasSelectedLocation {
                if let varSizeselectedLocation = selectedLocation?.computeMessageSize(fieldNumber: 11) {
                    serialize_size += varSizeselectedLocation
                }
            }
            if hasSpaceId {
                serialize_size += spaceId.computeStringSize(fieldNumber: 12)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> Present.RequestHeader.Builder {
            return Present.RequestHeader.classBuilder() as! Present.RequestHeader.Builder
        }
        public func getBuilder() -> Present.RequestHeader.Builder {
            return classBuilder() as! Present.RequestHeader.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Present.RequestHeader.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Present.RequestHeader.Builder()
        }
        public func toBuilder() throws -> Present.RequestHeader.Builder {
            return try Present.RequestHeader.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Present.RequestHeader) throws -> Present.RequestHeader.Builder {
            return try Present.RequestHeader.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if hasClientUuid {
                jsonMap["clientUuid"] = clientUuid
            }
            if hasRequestUuid {
                jsonMap["requestUuid"] = requestUuid
            }
            if hasAuthorizationKey {
                jsonMap["authorizationKey"] = authorizationKey
            }
            if hasPlatform {
                jsonMap["platform"] = platform.toString()
            }
            if hasApiVersion {
                jsonMap["apiVersion"] = UInt(apiVersion)
            }
            if hasClientVersion {
                jsonMap["clientVersion"] = clientVersion
            }
            if hasPlatformVersion {
                jsonMap["platformVersion"] = platformVersion
            }
            if hasLocation {
                jsonMap["location"] = try location.encode()
            }
            if hasSelectedLocation {
                jsonMap["selectedLocation"] = try selectedLocation.encode()
            }
            if hasDeviceName {
                jsonMap["deviceName"] = deviceName
            }
            if hasSpaceId {
                jsonMap["spaceId"] = spaceId
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Present.RequestHeader {
            return try Present.RequestHeader.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Present.RequestHeader {
            return try Present.RequestHeader.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            if hasClientUuid {
                output += "\(indent) clientUuid: \(clientUuid) \n"
            }
            if hasRequestUuid {
                output += "\(indent) requestUuid: \(requestUuid) \n"
            }
            if hasAuthorizationKey {
                output += "\(indent) authorizationKey: \(authorizationKey) \n"
            }
            if (hasPlatform) {
                output += "\(indent) platform: \(platform.description)\n"
            }
            if hasApiVersion {
                output += "\(indent) apiVersion: \(apiVersion) \n"
            }
            if hasClientVersion {
                output += "\(indent) clientVersion: \(clientVersion) \n"
            }
            if hasPlatformVersion {
                output += "\(indent) platformVersion: \(platformVersion) \n"
            }
            if hasLocation {
                output += "\(indent) location {\n"
                if let outDescLocation = location {
                    output += try outDescLocation.getDescription(indent: "\(indent)  ")
                }
                output += "\(indent) }\n"
            }
            if hasDeviceName {
                output += "\(indent) deviceName: \(deviceName) \n"
            }
            if hasSelectedLocation {
                output += "\(indent) selectedLocation {\n"
                if let outDescSelectedLocation = selectedLocation {
                    output += try outDescSelectedLocation.getDescription(indent: "\(indent)  ")
                }
                output += "\(indent) }\n"
            }
            if hasSpaceId {
                output += "\(indent) spaceId: \(spaceId) \n"
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasClientUuid {
                    hashCode = (hashCode &* 31) &+ clientUuid.hashValue
                }
                if hasRequestUuid {
                    hashCode = (hashCode &* 31) &+ requestUuid.hashValue
                }
                if hasAuthorizationKey {
                    hashCode = (hashCode &* 31) &+ authorizationKey.hashValue
                }
                if hasPlatform {
                     hashCode = (hashCode &* 31) &+ platform.hashValue
                }
                if hasApiVersion {
                    hashCode = (hashCode &* 31) &+ apiVersion.hashValue
                }
                if hasClientVersion {
                    hashCode = (hashCode &* 31) &+ clientVersion.hashValue
                }
                if hasPlatformVersion {
                    hashCode = (hashCode &* 31) &+ platformVersion.hashValue
                }
                if hasLocation {
                    if let hashValuelocation = location?.hashValue {
                        hashCode = (hashCode &* 31) &+ hashValuelocation
                    }
                }
                if hasDeviceName {
                    hashCode = (hashCode &* 31) &+ deviceName.hashValue
                }
                if hasSelectedLocation {
                    if let hashValueselectedLocation = selectedLocation?.hashValue {
                        hashCode = (hashCode &* 31) &+ hashValueselectedLocation
                    }
                }
                if hasSpaceId {
                    hashCode = (hashCode &* 31) &+ spaceId.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Present.RequestHeader"
        }
        override public func className() -> String {
            return "Present.RequestHeader"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:Present.RequestHeader = Present.RequestHeader()
            public func getMessage() -> Present.RequestHeader {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            /// Identifies an installation of the app. Generated the first time the app runs.
            public var clientUuid:String {
                get {
                    return builderResult.clientUuid
                }
                set (value) {
                    builderResult.hasClientUuid = true
                    builderResult.clientUuid = value
                }
            }
            public var hasClientUuid:Bool {
                get {
                    return builderResult.hasClientUuid
                }
            }
            @discardableResult
            public func setClientUuid(_ value:String) -> Present.RequestHeader.Builder {
                self.clientUuid = value
                return self
            }
            @discardableResult
            public func clearClientUuid() -> Present.RequestHeader.Builder{
                builderResult.hasClientUuid = false
                builderResult.clientUuid = ""
                return self
            }
            /// Identifies a request. Can be used in handling duplicate requests.
            public var requestUuid:String {
                get {
                    return builderResult.requestUuid
                }
                set (value) {
                    builderResult.hasRequestUuid = true
                    builderResult.requestUuid = value
                }
            }
            public var hasRequestUuid:Bool {
                get {
                    return builderResult.hasRequestUuid
                }
            }
            @discardableResult
            public func setRequestUuid(_ value:String) -> Present.RequestHeader.Builder {
                self.requestUuid = value
                return self
            }
            @discardableResult
            public func clearRequestUuid() -> Present.RequestHeader.Builder{
                builderResult.hasRequestUuid = false
                builderResult.requestUuid = ""
                return self
            }
            /// Required to authorize requests. It's not possible for us to completely block unauthorized
            /// API clients, but much like iTunes DRM, this raises the bar quite a bit. Computed as:
            /// base64(sha256(global key | client UUID | request UUID))
            public var authorizationKey:String {
                get {
                    return builderResult.authorizationKey
                }
                set (value) {
                    builderResult.hasAuthorizationKey = true
                    builderResult.authorizationKey = value
                }
            }
            public var hasAuthorizationKey:Bool {
                get {
                    return builderResult.hasAuthorizationKey
                }
            }
            @discardableResult
            public func setAuthorizationKey(_ value:String) -> Present.RequestHeader.Builder {
                self.authorizationKey = value
                return self
            }
            @discardableResult
            public func clearAuthorizationKey() -> Present.RequestHeader.Builder{
                builderResult.hasAuthorizationKey = false
                builderResult.authorizationKey = ""
                return self
            }
            /// Client platform
                public var platform:Present.Platform {
                    get {
                        return builderResult.platform
                    }
                    set (value) {
                        builderResult.hasPlatform = true
                        builderResult.platform = value
                    }
                }
                public var hasPlatform:Bool{
                    get {
                        return builderResult.hasPlatform
                    }
                }
            @discardableResult
                public func setPlatform(_ value:Present.Platform) -> Present.RequestHeader.Builder {
                  self.platform = value
                  return self
                }
            @discardableResult
                public func clearPlatform() -> Present.RequestHeader.Builder {
                   builderResult.hasPlatform = false
                   builderResult.platform = .unknownPlatform
                   return self
                }
            /// The client app's desired API version.
            public var apiVersion:UInt32 {
                get {
                    return builderResult.apiVersion
                }
                set (value) {
                    builderResult.hasApiVersion = true
                    builderResult.apiVersion = value
                }
            }
            public var hasApiVersion:Bool {
                get {
                    return builderResult.hasApiVersion
                }
            }
            @discardableResult
            public func setApiVersion(_ value:UInt32) -> Present.RequestHeader.Builder {
                self.apiVersion = value
                return self
            }
            @discardableResult
            public func clearApiVersion() -> Present.RequestHeader.Builder{
                builderResult.hasApiVersion = false
                builderResult.apiVersion = UInt32(0)
                return self
            }
            /// Version of the client app.
            public var clientVersion:String {
                get {
                    return builderResult.clientVersion
                }
                set (value) {
                    builderResult.hasClientVersion = true
                    builderResult.clientVersion = value
                }
            }
            public var hasClientVersion:Bool {
                get {
                    return builderResult.hasClientVersion
                }
            }
            @discardableResult
            public func setClientVersion(_ value:String) -> Present.RequestHeader.Builder {
                self.clientVersion = value
                return self
            }
            @discardableResult
            public func clearClientVersion() -> Present.RequestHeader.Builder{
                builderResult.hasClientVersion = false
                builderResult.clientVersion = ""
                return self
            }
            /// Version of the client OS.
            public var platformVersion:String {
                get {
                    return builderResult.platformVersion
                }
                set (value) {
                    builderResult.hasPlatformVersion = true
                    builderResult.platformVersion = value
                }
            }
            public var hasPlatformVersion:Bool {
                get {
                    return builderResult.hasPlatformVersion
                }
            }
            @discardableResult
            public func setPlatformVersion(_ value:String) -> Present.RequestHeader.Builder {
                self.platformVersion = value
                return self
            }
            @discardableResult
            public func clearPlatformVersion() -> Present.RequestHeader.Builder{
                builderResult.hasPlatformVersion = false
                builderResult.platformVersion = ""
                return self
            }
            /// The user's actual location.
            public var location:Present.Coordinates! {
                get {
                    if locationBuilder_ != nil {
                        builderResult.location = locationBuilder_.getMessage()
                    }
                    return builderResult.location
                }
                set (value) {
                    builderResult.hasLocation = true
                    builderResult.location = value
                }
            }
            public var hasLocation:Bool {
                get {
                    return builderResult.hasLocation
                }
            }
            fileprivate var locationBuilder_:Present.Coordinates.Builder! {
                didSet {
                    builderResult.hasLocation = true
                }
            }
            public func getLocationBuilder() -> Present.Coordinates.Builder {
                if locationBuilder_ == nil {
                    locationBuilder_ = Present.Coordinates.Builder()
                    builderResult.location = locationBuilder_.getMessage()
                    if location != nil {
                        try! locationBuilder_.mergeFrom(other: location)
                    }
                }
                return locationBuilder_
            }
            @discardableResult
            public func setLocation(_ value:Present.Coordinates!) -> Present.RequestHeader.Builder {
                self.location = value
                return self
            }
            @discardableResult
            public func mergeLocation(value:Present.Coordinates) throws -> Present.RequestHeader.Builder {
                if builderResult.hasLocation {
                    builderResult.location = try Present.Coordinates.builderWithPrototype(prototype:builderResult.location).mergeFrom(other: value).buildPartial()
                } else {
                    builderResult.location = value
                }
                builderResult.hasLocation = true
                return self
            }
            @discardableResult
            public func clearLocation() -> Present.RequestHeader.Builder {
                locationBuilder_ = nil
                builderResult.hasLocation = false
                builderResult.location = nil
                return self
            }
            /// The user's selected location.
            public var selectedLocation:Present.Coordinates! {
                get {
                    if selectedLocationBuilder_ != nil {
                        builderResult.selectedLocation = selectedLocationBuilder_.getMessage()
                    }
                    return builderResult.selectedLocation
                }
                set (value) {
                    builderResult.hasSelectedLocation = true
                    builderResult.selectedLocation = value
                }
            }
            public var hasSelectedLocation:Bool {
                get {
                    return builderResult.hasSelectedLocation
                }
            }
            fileprivate var selectedLocationBuilder_:Present.Coordinates.Builder! {
                didSet {
                    builderResult.hasSelectedLocation = true
                }
            }
            public func getSelectedLocationBuilder() -> Present.Coordinates.Builder {
                if selectedLocationBuilder_ == nil {
                    selectedLocationBuilder_ = Present.Coordinates.Builder()
                    builderResult.selectedLocation = selectedLocationBuilder_.getMessage()
                    if selectedLocation != nil {
                        try! selectedLocationBuilder_.mergeFrom(other: selectedLocation)
                    }
                }
                return selectedLocationBuilder_
            }
            @discardableResult
            public func setSelectedLocation(_ value:Present.Coordinates!) -> Present.RequestHeader.Builder {
                self.selectedLocation = value
                return self
            }
            @discardableResult
            public func mergeSelectedLocation(value:Present.Coordinates) throws -> Present.RequestHeader.Builder {
                if builderResult.hasSelectedLocation {
                    builderResult.selectedLocation = try Present.Coordinates.builderWithPrototype(prototype:builderResult.selectedLocation).mergeFrom(other: value).buildPartial()
                } else {
                    builderResult.selectedLocation = value
                }
                builderResult.hasSelectedLocation = true
                return self
            }
            @discardableResult
            public func clearSelectedLocation() -> Present.RequestHeader.Builder {
                selectedLocationBuilder_ = nil
                builderResult.hasSelectedLocation = false
                builderResult.selectedLocation = nil
                return self
            }
            /// Used for debugging.
            public var deviceName:String {
                get {
                    return builderResult.deviceName
                }
                set (value) {
                    builderResult.hasDeviceName = true
                    builderResult.deviceName = value
                }
            }
            public var hasDeviceName:Bool {
                get {
                    return builderResult.hasDeviceName
                }
            }
            @discardableResult
            public func setDeviceName(_ value:String) -> Present.RequestHeader.Builder {
                self.deviceName = value
                return self
            }
            @discardableResult
            public func clearDeviceName() -> Present.RequestHeader.Builder{
                builderResult.hasDeviceName = false
                builderResult.deviceName = ""
                return self
            }
            /// The user's selected space. Will be null coming from old clients.
            public var spaceId:String {
                get {
                    return builderResult.spaceId
                }
                set (value) {
                    builderResult.hasSpaceId = true
                    builderResult.spaceId = value
                }
            }
            public var hasSpaceId:Bool {
                get {
                    return builderResult.hasSpaceId
                }
            }
            @discardableResult
            public func setSpaceId(_ value:String) -> Present.RequestHeader.Builder {
                self.spaceId = value
                return self
            }
            @discardableResult
            public func clearSpaceId() -> Present.RequestHeader.Builder{
                builderResult.hasSpaceId = false
                builderResult.spaceId = ""
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> Present.RequestHeader.Builder {
                builderResult = Present.RequestHeader()
                return self
            }
            override public func clone() throws -> Present.RequestHeader.Builder {
                return try Present.RequestHeader.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> Present.RequestHeader {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> Present.RequestHeader {
                let returnMe:Present.RequestHeader = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:Present.RequestHeader) throws -> Present.RequestHeader.Builder {
                if other == Present.RequestHeader() {
                    return self
                }
                if other.hasClientUuid {
                    clientUuid = other.clientUuid
                }
                if other.hasRequestUuid {
                    requestUuid = other.requestUuid
                }
                if other.hasAuthorizationKey {
                    authorizationKey = other.authorizationKey
                }
                if other.hasPlatform {
                    platform = other.platform
                }
                if other.hasApiVersion {
                    apiVersion = other.apiVersion
                }
                if other.hasClientVersion {
                    clientVersion = other.clientVersion
                }
                if other.hasPlatformVersion {
                    platformVersion = other.platformVersion
                }
                if (other.hasLocation) {
                    try mergeLocation(value: other.location)
                }
                if (other.hasSelectedLocation) {
                    try mergeSelectedLocation(value: other.selectedLocation)
                }
                if other.hasDeviceName {
                    deviceName = other.deviceName
                }
                if other.hasSpaceId {
                    spaceId = other.spaceId
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Present.RequestHeader.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Present.RequestHeader.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 10:
                        clientUuid = try codedInputStream.readString()

                    case 18:
                        requestUuid = try codedInputStream.readString()

                    case 34:
                        authorizationKey = try codedInputStream.readString()

                    case 40:
                        let valueIntplatform = try codedInputStream.readEnum()
                        if let enumsplatform = Present.Platform(rawValue:valueIntplatform){
                            platform = enumsplatform
                        } else {
                            try unknownFieldsBuilder.mergeVarintField(fieldNumber: 5, value:Int64(valueIntplatform))
                        }

                    case 48:
                        apiVersion = try codedInputStream.readUInt32()

                    case 58:
                        clientVersion = try codedInputStream.readString()

                    case 66:
                        platformVersion = try codedInputStream.readString()

                    case 74:
                        let subBuilder:Present.Coordinates.Builder = Present.Coordinates.Builder()
                        if hasLocation {
                            try subBuilder.mergeFrom(other: location)
                        }
                        try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                        location = subBuilder.buildPartial()

                    case 82:
                        deviceName = try codedInputStream.readString()

                    case 90:
                        let subBuilder:Present.Coordinates.Builder = Present.Coordinates.Builder()
                        if hasSelectedLocation {
                            try subBuilder.mergeFrom(other: selectedLocation)
                        }
                        try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                        selectedLocation = subBuilder.buildPartial()

                    case 98:
                        spaceId = try codedInputStream.readString()

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Present.RequestHeader.Builder {
                let resultDecodedBuilder = Present.RequestHeader.Builder()
                if let jsonValueClientUuid = jsonMap["clientUuid"] as? String {
                    resultDecodedBuilder.clientUuid = jsonValueClientUuid
                }
                if let jsonValueRequestUuid = jsonMap["requestUuid"] as? String {
                    resultDecodedBuilder.requestUuid = jsonValueRequestUuid
                }
                if let jsonValueAuthorizationKey = jsonMap["authorizationKey"] as? String {
                    resultDecodedBuilder.authorizationKey = jsonValueAuthorizationKey
                }
                if let jsonValuePlatform = jsonMap["platform"] as? String {
                    resultDecodedBuilder.platform = try Present.Platform.fromString(str: jsonValuePlatform)
                }
                if let jsonValueApiVersion = jsonMap["apiVersion"] as? UInt {
                    resultDecodedBuilder.apiVersion = UInt32(jsonValueApiVersion)
                } else if let jsonValueApiVersion = jsonMap["apiVersion"] as? String {
                    resultDecodedBuilder.apiVersion = UInt32(jsonValueApiVersion)!
                }
                if let jsonValueClientVersion = jsonMap["clientVersion"] as? String {
                    resultDecodedBuilder.clientVersion = jsonValueClientVersion
                }
                if let jsonValuePlatformVersion = jsonMap["platformVersion"] as? String {
                    resultDecodedBuilder.platformVersion = jsonValuePlatformVersion
                }
                if let jsonValueLocation = jsonMap["location"] as? Dictionary<String,Any> {
                    resultDecodedBuilder.location = try Present.Coordinates.Builder.decodeToBuilder(jsonMap:jsonValueLocation).build()

                }
                if let jsonValueSelectedLocation = jsonMap["selectedLocation"] as? Dictionary<String,Any> {
                    resultDecodedBuilder.selectedLocation = try Present.Coordinates.Builder.decodeToBuilder(jsonMap:jsonValueSelectedLocation).build()

                }
                if let jsonValueDeviceName = jsonMap["deviceName"] as? String {
                    resultDecodedBuilder.deviceName = jsonValueDeviceName
                }
                if let jsonValueSpaceId = jsonMap["spaceId"] as? String {
                    resultDecodedBuilder.spaceId = jsonValueSpaceId
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> Present.RequestHeader.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try Present.RequestHeader.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

    final public class InternalHeader : GeneratedMessage {

        public static func == (lhs: Present.InternalHeader, rhs: Present.InternalHeader) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasAuthorizationKey == rhs.hasAuthorizationKey) && (!lhs.hasAuthorizationKey || lhs.authorizationKey == rhs.authorizationKey)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }

        /// Private key used to verify this request came from an internal server.
        public fileprivate(set) var authorizationKey:String = ""
        public fileprivate(set) var hasAuthorizationKey:Bool = false

        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            if !hasAuthorizationKey {
                return false
            }
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if hasAuthorizationKey {
                try codedOutputStream.writeString(fieldNumber: 4, value:authorizationKey)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            if hasAuthorizationKey {
                serialize_size += authorizationKey.computeStringSize(fieldNumber: 4)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> Present.InternalHeader.Builder {
            return Present.InternalHeader.classBuilder() as! Present.InternalHeader.Builder
        }
        public func getBuilder() -> Present.InternalHeader.Builder {
            return classBuilder() as! Present.InternalHeader.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Present.InternalHeader.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Present.InternalHeader.Builder()
        }
        public func toBuilder() throws -> Present.InternalHeader.Builder {
            return try Present.InternalHeader.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Present.InternalHeader) throws -> Present.InternalHeader.Builder {
            return try Present.InternalHeader.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if hasAuthorizationKey {
                jsonMap["authorizationKey"] = authorizationKey
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Present.InternalHeader {
            return try Present.InternalHeader.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Present.InternalHeader {
            return try Present.InternalHeader.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            if hasAuthorizationKey {
                output += "\(indent) authorizationKey: \(authorizationKey) \n"
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasAuthorizationKey {
                    hashCode = (hashCode &* 31) &+ authorizationKey.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Present.InternalHeader"
        }
        override public func className() -> String {
            return "Present.InternalHeader"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:Present.InternalHeader = Present.InternalHeader()
            public func getMessage() -> Present.InternalHeader {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            /// Private key used to verify this request came from an internal server.
            public var authorizationKey:String {
                get {
                    return builderResult.authorizationKey
                }
                set (value) {
                    builderResult.hasAuthorizationKey = true
                    builderResult.authorizationKey = value
                }
            }
            public var hasAuthorizationKey:Bool {
                get {
                    return builderResult.hasAuthorizationKey
                }
            }
            @discardableResult
            public func setAuthorizationKey(_ value:String) -> Present.InternalHeader.Builder {
                self.authorizationKey = value
                return self
            }
            @discardableResult
            public func clearAuthorizationKey() -> Present.InternalHeader.Builder{
                builderResult.hasAuthorizationKey = false
                builderResult.authorizationKey = ""
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> Present.InternalHeader.Builder {
                builderResult = Present.InternalHeader()
                return self
            }
            override public func clone() throws -> Present.InternalHeader.Builder {
                return try Present.InternalHeader.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> Present.InternalHeader {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> Present.InternalHeader {
                let returnMe:Present.InternalHeader = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:Present.InternalHeader) throws -> Present.InternalHeader.Builder {
                if other == Present.InternalHeader() {
                    return self
                }
                if other.hasAuthorizationKey {
                    authorizationKey = other.authorizationKey
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Present.InternalHeader.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Present.InternalHeader.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 34:
                        authorizationKey = try codedInputStream.readString()

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Present.InternalHeader.Builder {
                let resultDecodedBuilder = Present.InternalHeader.Builder()
                if let jsonValueAuthorizationKey = jsonMap["authorizationKey"] as? String {
                    resultDecodedBuilder.authorizationKey = jsonValueAuthorizationKey
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> Present.InternalHeader.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try Present.InternalHeader.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

}
extension Present.RequestHeader: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Present.RequestHeader> {
        var mergedArray = Array<Present.RequestHeader>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Present.RequestHeader? {
        return try Present.RequestHeader.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Present.RequestHeader {
        return try Present.RequestHeader.Builder().mergeFrom(data: data, extensionRegistry:Present.HeadersRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Present.RequestHeader {
        return try Present.RequestHeader.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Present.RequestHeader {
        return try Present.RequestHeader.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Present.RequestHeader {
        return try Present.RequestHeader.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Present.RequestHeader {
        return try Present.RequestHeader.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Present.RequestHeader {
        return try Present.RequestHeader.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "clientUuid": return self.clientUuid
        case "requestUuid": return self.requestUuid
        case "authorizationKey": return self.authorizationKey
        case "platform": return self.platform
        case "apiVersion": return self.apiVersion
        case "clientVersion": return self.clientVersion
        case "platformVersion": return self.platformVersion
        case "location": return self.location
        case "selectedLocation": return self.selectedLocation
        case "deviceName": return self.deviceName
        case "spaceId": return self.spaceId
        default: return nil
        }
    }
}
extension Present.RequestHeader.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "clientUuid": return self.clientUuid
            case "requestUuid": return self.requestUuid
            case "authorizationKey": return self.authorizationKey
            case "platform": return self.platform
            case "apiVersion": return self.apiVersion
            case "clientVersion": return self.clientVersion
            case "platformVersion": return self.platformVersion
            case "location": return self.location
            case "selectedLocation": return self.selectedLocation
            case "deviceName": return self.deviceName
            case "spaceId": return self.spaceId
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "clientUuid":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.clientUuid = newSubscriptValue
            case "requestUuid":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.requestUuid = newSubscriptValue
            case "authorizationKey":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.authorizationKey = newSubscriptValue
            case "platform":
                guard let newSubscriptValue = newSubscriptValue as? Present.Platform else {
                    return
                }
                self.platform = newSubscriptValue
            case "apiVersion":
                guard let newSubscriptValue = newSubscriptValue as? UInt32 else {
                    return
                }
                self.apiVersion = newSubscriptValue
            case "clientVersion":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.clientVersion = newSubscriptValue
            case "platformVersion":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.platformVersion = newSubscriptValue
            case "location":
                guard let newSubscriptValue = newSubscriptValue as? Present.Coordinates else {
                    return
                }
                self.location = newSubscriptValue
            case "selectedLocation":
                guard let newSubscriptValue = newSubscriptValue as? Present.Coordinates else {
                    return
                }
                self.selectedLocation = newSubscriptValue
            case "deviceName":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.deviceName = newSubscriptValue
            case "spaceId":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.spaceId = newSubscriptValue
            default: return
            }
        }
    }
}
extension Present.InternalHeader: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Present.InternalHeader> {
        var mergedArray = Array<Present.InternalHeader>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Present.InternalHeader? {
        return try Present.InternalHeader.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Present.InternalHeader {
        return try Present.InternalHeader.Builder().mergeFrom(data: data, extensionRegistry:Present.HeadersRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Present.InternalHeader {
        return try Present.InternalHeader.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Present.InternalHeader {
        return try Present.InternalHeader.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Present.InternalHeader {
        return try Present.InternalHeader.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Present.InternalHeader {
        return try Present.InternalHeader.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Present.InternalHeader {
        return try Present.InternalHeader.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "authorizationKey": return self.authorizationKey
        default: return nil
        }
    }
}
extension Present.InternalHeader.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "authorizationKey": return self.authorizationKey
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "authorizationKey":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.authorizationKey = newSubscriptValue
            default: return
            }
        }
    }
}

// @@protoc_insertion_point(global_scope)
