/// Generated by the Protocol Buffers 3.2.0 compiler.  DO NOT EDIT!
/// Protobuf-swift version: 3.0.13
/// Source file "content.proto"
/// Syntax "Proto2"

import Foundation
import ProtocolBuffers


public extension Present{}

public extension Present {
    public struct ContentRoot {
        public static let `default` = ContentRoot()
        public var extensionRegistry:ExtensionRegistry

        init() {
            extensionRegistry = ExtensionRegistry()
            registerAllExtensions(registry: extensionRegistry)
        }
        public func registerAllExtensions(registry: ExtensionRegistry) {
        }
    }



    //Enum type declaration start 

    public enum ContentType:Int32, CustomDebugStringConvertible, CustomStringConvertible, Hashable {
        case jpeg = 1
        case mp4 = 2
        public func toString() -> String {
            switch self {
            case .jpeg: return "JPEG"
            case .mp4: return "MP4"
            }
        }
        public static func fromString(str:String) throws -> Present.ContentType {
            switch str {
            case "JPEG":    return .jpeg
            case "MP4":    return .mp4
            default: throw ProtocolBuffersError.invalidProtocolBuffer("Conversion String to Enum has failed.")
            }
        }
        public var debugDescription:String { return getDescription() }
        public var description:String { return getDescription() }
        private func getDescription() -> String { 
            switch self {
            case .jpeg: return ".jpeg"
            case .mp4: return ".mp4"
            }
        }
        public var hashValue:Int {
            return self.rawValue.hashValue
        }
        public static func ==(lhs:ContentType, rhs:ContentType) -> Bool {
            return lhs.hashValue == rhs.hashValue
        }
    }

    //Enum type declaration end 

    /// Used to request content by UUID.
    final public class ContentRequest : GeneratedMessage {

        public static func == (lhs: Present.ContentRequest, rhs: Present.ContentRequest) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasUuid == rhs.hasUuid) && (!lhs.hasUuid || lhs.uuid == rhs.uuid)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }

        public fileprivate(set) var uuid:String = ""
        public fileprivate(set) var hasUuid:Bool = false

        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            if !hasUuid {
                return false
            }
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if hasUuid {
                try codedOutputStream.writeString(fieldNumber: 1, value:uuid)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            if hasUuid {
                serialize_size += uuid.computeStringSize(fieldNumber: 1)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> Present.ContentRequest.Builder {
            return Present.ContentRequest.classBuilder() as! Present.ContentRequest.Builder
        }
        public func getBuilder() -> Present.ContentRequest.Builder {
            return classBuilder() as! Present.ContentRequest.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Present.ContentRequest.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Present.ContentRequest.Builder()
        }
        public func toBuilder() throws -> Present.ContentRequest.Builder {
            return try Present.ContentRequest.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Present.ContentRequest) throws -> Present.ContentRequest.Builder {
            return try Present.ContentRequest.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if hasUuid {
                jsonMap["uuid"] = uuid
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Present.ContentRequest {
            return try Present.ContentRequest.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Present.ContentRequest {
            return try Present.ContentRequest.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            if hasUuid {
                output += "\(indent) uuid: \(uuid) \n"
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasUuid {
                    hashCode = (hashCode &* 31) &+ uuid.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Present.ContentRequest"
        }
        override public func className() -> String {
            return "Present.ContentRequest"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:Present.ContentRequest = Present.ContentRequest()
            public func getMessage() -> Present.ContentRequest {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            public var uuid:String {
                get {
                    return builderResult.uuid
                }
                set (value) {
                    builderResult.hasUuid = true
                    builderResult.uuid = value
                }
            }
            public var hasUuid:Bool {
                get {
                    return builderResult.hasUuid
                }
            }
            @discardableResult
            public func setUuid(_ value:String) -> Present.ContentRequest.Builder {
                self.uuid = value
                return self
            }
            @discardableResult
            public func clearUuid() -> Present.ContentRequest.Builder{
                builderResult.hasUuid = false
                builderResult.uuid = ""
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> Present.ContentRequest.Builder {
                builderResult = Present.ContentRequest()
                return self
            }
            override public func clone() throws -> Present.ContentRequest.Builder {
                return try Present.ContentRequest.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> Present.ContentRequest {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> Present.ContentRequest {
                let returnMe:Present.ContentRequest = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:Present.ContentRequest) throws -> Present.ContentRequest.Builder {
                if other == Present.ContentRequest() {
                    return self
                }
                if other.hasUuid {
                    uuid = other.uuid
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Present.ContentRequest.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Present.ContentRequest.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 10:
                        uuid = try codedInputStream.readString()

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Present.ContentRequest.Builder {
                let resultDecodedBuilder = Present.ContentRequest.Builder()
                if let jsonValueUuid = jsonMap["uuid"] as? String {
                    resultDecodedBuilder.uuid = jsonValueUuid
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> Present.ContentRequest.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try Present.ContentRequest.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

    /// Request to upload binary content and store it with the associated uuid.
    final public class ContentUploadRequest : GeneratedMessage {

        public static func == (lhs: Present.ContentUploadRequest, rhs: Present.ContentUploadRequest) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasUuid == rhs.hasUuid) && (!lhs.hasUuid || lhs.uuid == rhs.uuid)
            fieldCheck = fieldCheck && (lhs.hasType == rhs.hasType) && (!lhs.hasType || lhs.type == rhs.type)
            fieldCheck = fieldCheck && (lhs.hasContent == rhs.hasContent) && (!lhs.hasContent || lhs.content == rhs.content)
            fieldCheck = fieldCheck && (lhs.hasContentThumbnail == rhs.hasContentThumbnail) && (!lhs.hasContentThumbnail || lhs.contentThumbnail == rhs.contentThumbnail)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }

        /// The client supplied uuid to be associated with the content
        public fileprivate(set) var uuid:String = ""
        public fileprivate(set) var hasUuid:Bool = false

        public fileprivate(set) var type:Present.ContentType = Present.ContentType.jpeg
        public fileprivate(set) var hasType:Bool = false
        /// The content binary
        public fileprivate(set) var content:Data = Data()
        public fileprivate(set) var hasContent:Bool = false

        /// A binary JPEG representation of the content
        public fileprivate(set) var contentThumbnail:Data = Data()
        public fileprivate(set) var hasContentThumbnail:Bool = false

        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            if !hasUuid {
                return false
            }
            if !hasType {
                return false
            }
            if !hasContent {
                return false
            }
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if hasUuid {
                try codedOutputStream.writeString(fieldNumber: 1, value:uuid)
            }
            if hasType {
                try codedOutputStream.writeEnum(fieldNumber: 2, value:type.rawValue)
            }
            if hasContent {
                try codedOutputStream.writeData(fieldNumber: 3, value:content)
            }
            if hasContentThumbnail {
                try codedOutputStream.writeData(fieldNumber: 4, value:contentThumbnail)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            if hasUuid {
                serialize_size += uuid.computeStringSize(fieldNumber: 1)
            }
            if (hasType) {
                serialize_size += type.rawValue.computeEnumSize(fieldNumber: 2)
            }
            if hasContent {
                serialize_size += content.computeDataSize(fieldNumber: 3)
            }
            if hasContentThumbnail {
                serialize_size += contentThumbnail.computeDataSize(fieldNumber: 4)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> Present.ContentUploadRequest.Builder {
            return Present.ContentUploadRequest.classBuilder() as! Present.ContentUploadRequest.Builder
        }
        public func getBuilder() -> Present.ContentUploadRequest.Builder {
            return classBuilder() as! Present.ContentUploadRequest.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Present.ContentUploadRequest.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Present.ContentUploadRequest.Builder()
        }
        public func toBuilder() throws -> Present.ContentUploadRequest.Builder {
            return try Present.ContentUploadRequest.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Present.ContentUploadRequest) throws -> Present.ContentUploadRequest.Builder {
            return try Present.ContentUploadRequest.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if hasUuid {
                jsonMap["uuid"] = uuid
            }
            if hasType {
                jsonMap["type"] = type.toString()
            }
            if hasContent {
                jsonMap["content"] = content.base64EncodedString(options: Data.Base64EncodingOptions(rawValue: 0))
            }
            if hasContentThumbnail {
                jsonMap["contentThumbnail"] = contentThumbnail.base64EncodedString(options: Data.Base64EncodingOptions(rawValue: 0))
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Present.ContentUploadRequest {
            return try Present.ContentUploadRequest.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Present.ContentUploadRequest {
            return try Present.ContentUploadRequest.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            if hasUuid {
                output += "\(indent) uuid: \(uuid) \n"
            }
            if (hasType) {
                output += "\(indent) type: \(type.description)\n"
            }
            if hasContent {
                output += "\(indent) content: \(content) \n"
            }
            if hasContentThumbnail {
                output += "\(indent) contentThumbnail: \(contentThumbnail) \n"
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasUuid {
                    hashCode = (hashCode &* 31) &+ uuid.hashValue
                }
                if hasType {
                     hashCode = (hashCode &* 31) &+ type.hashValue
                }
                if hasContent {
                    hashCode = (hashCode &* 31) &+ content.hashValue
                }
                if hasContentThumbnail {
                    hashCode = (hashCode &* 31) &+ contentThumbnail.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Present.ContentUploadRequest"
        }
        override public func className() -> String {
            return "Present.ContentUploadRequest"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:Present.ContentUploadRequest = Present.ContentUploadRequest()
            public func getMessage() -> Present.ContentUploadRequest {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            /// The client supplied uuid to be associated with the content
            public var uuid:String {
                get {
                    return builderResult.uuid
                }
                set (value) {
                    builderResult.hasUuid = true
                    builderResult.uuid = value
                }
            }
            public var hasUuid:Bool {
                get {
                    return builderResult.hasUuid
                }
            }
            @discardableResult
            public func setUuid(_ value:String) -> Present.ContentUploadRequest.Builder {
                self.uuid = value
                return self
            }
            @discardableResult
            public func clearUuid() -> Present.ContentUploadRequest.Builder{
                builderResult.hasUuid = false
                builderResult.uuid = ""
                return self
            }
            /// Type of content.
                public var type:Present.ContentType {
                    get {
                        return builderResult.type
                    }
                    set (value) {
                        builderResult.hasType = true
                        builderResult.type = value
                    }
                }
                public var hasType:Bool{
                    get {
                        return builderResult.hasType
                    }
                }
            @discardableResult
                public func setType(_ value:Present.ContentType) -> Present.ContentUploadRequest.Builder {
                  self.type = value
                  return self
                }
            @discardableResult
                public func clearType() -> Present.ContentUploadRequest.Builder {
                   builderResult.hasType = false
                   builderResult.type = .jpeg
                   return self
                }
            /// The content binary
            public var content:Data {
                get {
                    return builderResult.content
                }
                set (value) {
                    builderResult.hasContent = true
                    builderResult.content = value
                }
            }
            public var hasContent:Bool {
                get {
                    return builderResult.hasContent
                }
            }
            @discardableResult
            public func setContent(_ value:Data) -> Present.ContentUploadRequest.Builder {
                self.content = value
                return self
            }
            @discardableResult
            public func clearContent() -> Present.ContentUploadRequest.Builder{
                builderResult.hasContent = false
                builderResult.content = Data()
                return self
            }
            /// A binary JPEG representation of the content
            public var contentThumbnail:Data {
                get {
                    return builderResult.contentThumbnail
                }
                set (value) {
                    builderResult.hasContentThumbnail = true
                    builderResult.contentThumbnail = value
                }
            }
            public var hasContentThumbnail:Bool {
                get {
                    return builderResult.hasContentThumbnail
                }
            }
            @discardableResult
            public func setContentThumbnail(_ value:Data) -> Present.ContentUploadRequest.Builder {
                self.contentThumbnail = value
                return self
            }
            @discardableResult
            public func clearContentThumbnail() -> Present.ContentUploadRequest.Builder{
                builderResult.hasContentThumbnail = false
                builderResult.contentThumbnail = Data()
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> Present.ContentUploadRequest.Builder {
                builderResult = Present.ContentUploadRequest()
                return self
            }
            override public func clone() throws -> Present.ContentUploadRequest.Builder {
                return try Present.ContentUploadRequest.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> Present.ContentUploadRequest {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> Present.ContentUploadRequest {
                let returnMe:Present.ContentUploadRequest = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:Present.ContentUploadRequest) throws -> Present.ContentUploadRequest.Builder {
                if other == Present.ContentUploadRequest() {
                    return self
                }
                if other.hasUuid {
                    uuid = other.uuid
                }
                if other.hasType {
                    type = other.type
                }
                if other.hasContent {
                    content = other.content
                }
                if other.hasContentThumbnail {
                    contentThumbnail = other.contentThumbnail
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Present.ContentUploadRequest.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Present.ContentUploadRequest.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 10:
                        uuid = try codedInputStream.readString()

                    case 16:
                        let valueInttype = try codedInputStream.readEnum()
                        if let enumstype = Present.ContentType(rawValue:valueInttype){
                            type = enumstype
                        } else {
                            try unknownFieldsBuilder.mergeVarintField(fieldNumber: 2, value:Int64(valueInttype))
                        }

                    case 26:
                        content = try codedInputStream.readData()

                    case 34:
                        contentThumbnail = try codedInputStream.readData()

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Present.ContentUploadRequest.Builder {
                let resultDecodedBuilder = Present.ContentUploadRequest.Builder()
                if let jsonValueUuid = jsonMap["uuid"] as? String {
                    resultDecodedBuilder.uuid = jsonValueUuid
                }
                if let jsonValueType = jsonMap["type"] as? String {
                    resultDecodedBuilder.type = try Present.ContentType.fromString(str: jsonValueType)
                }
                if let jsonValueContent = jsonMap["content"] as? String {
                    resultDecodedBuilder.content = Data(base64Encoded:jsonValueContent, options: Data.Base64DecodingOptions(rawValue:0))!
                }
                if let jsonValueContentThumbnail = jsonMap["contentThumbnail"] as? String {
                    resultDecodedBuilder.contentThumbnail = Data(base64Encoded:jsonValueContentThumbnail, options: Data.Base64DecodingOptions(rawValue:0))!
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> Present.ContentUploadRequest.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try Present.ContentUploadRequest.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

    /// Request that references content already stored
    final public class ContentReferenceRequest : GeneratedMessage {

        public static func == (lhs: Present.ContentReferenceRequest, rhs: Present.ContentReferenceRequest) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasUuid == rhs.hasUuid) && (!lhs.hasUuid || lhs.uuid == rhs.uuid)
            fieldCheck = fieldCheck && (lhs.hasType == rhs.hasType) && (!lhs.hasType || lhs.type == rhs.type)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }

        /// The uuid of the content
        public fileprivate(set) var uuid:String = ""
        public fileprivate(set) var hasUuid:Bool = false

        public fileprivate(set) var type:Present.ContentType = Present.ContentType.jpeg
        public fileprivate(set) var hasType:Bool = false
        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            if !hasUuid {
                return false
            }
            if !hasType {
                return false
            }
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if hasUuid {
                try codedOutputStream.writeString(fieldNumber: 1, value:uuid)
            }
            if hasType {
                try codedOutputStream.writeEnum(fieldNumber: 2, value:type.rawValue)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            if hasUuid {
                serialize_size += uuid.computeStringSize(fieldNumber: 1)
            }
            if (hasType) {
                serialize_size += type.rawValue.computeEnumSize(fieldNumber: 2)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> Present.ContentReferenceRequest.Builder {
            return Present.ContentReferenceRequest.classBuilder() as! Present.ContentReferenceRequest.Builder
        }
        public func getBuilder() -> Present.ContentReferenceRequest.Builder {
            return classBuilder() as! Present.ContentReferenceRequest.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Present.ContentReferenceRequest.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Present.ContentReferenceRequest.Builder()
        }
        public func toBuilder() throws -> Present.ContentReferenceRequest.Builder {
            return try Present.ContentReferenceRequest.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Present.ContentReferenceRequest) throws -> Present.ContentReferenceRequest.Builder {
            return try Present.ContentReferenceRequest.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if hasUuid {
                jsonMap["uuid"] = uuid
            }
            if hasType {
                jsonMap["type"] = type.toString()
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Present.ContentReferenceRequest {
            return try Present.ContentReferenceRequest.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Present.ContentReferenceRequest {
            return try Present.ContentReferenceRequest.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            if hasUuid {
                output += "\(indent) uuid: \(uuid) \n"
            }
            if (hasType) {
                output += "\(indent) type: \(type.description)\n"
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasUuid {
                    hashCode = (hashCode &* 31) &+ uuid.hashValue
                }
                if hasType {
                     hashCode = (hashCode &* 31) &+ type.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Present.ContentReferenceRequest"
        }
        override public func className() -> String {
            return "Present.ContentReferenceRequest"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:Present.ContentReferenceRequest = Present.ContentReferenceRequest()
            public func getMessage() -> Present.ContentReferenceRequest {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            /// The uuid of the content
            public var uuid:String {
                get {
                    return builderResult.uuid
                }
                set (value) {
                    builderResult.hasUuid = true
                    builderResult.uuid = value
                }
            }
            public var hasUuid:Bool {
                get {
                    return builderResult.hasUuid
                }
            }
            @discardableResult
            public func setUuid(_ value:String) -> Present.ContentReferenceRequest.Builder {
                self.uuid = value
                return self
            }
            @discardableResult
            public func clearUuid() -> Present.ContentReferenceRequest.Builder{
                builderResult.hasUuid = false
                builderResult.uuid = ""
                return self
            }
            /// Type of content.
                public var type:Present.ContentType {
                    get {
                        return builderResult.type
                    }
                    set (value) {
                        builderResult.hasType = true
                        builderResult.type = value
                    }
                }
                public var hasType:Bool{
                    get {
                        return builderResult.hasType
                    }
                }
            @discardableResult
                public func setType(_ value:Present.ContentType) -> Present.ContentReferenceRequest.Builder {
                  self.type = value
                  return self
                }
            @discardableResult
                public func clearType() -> Present.ContentReferenceRequest.Builder {
                   builderResult.hasType = false
                   builderResult.type = .jpeg
                   return self
                }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> Present.ContentReferenceRequest.Builder {
                builderResult = Present.ContentReferenceRequest()
                return self
            }
            override public func clone() throws -> Present.ContentReferenceRequest.Builder {
                return try Present.ContentReferenceRequest.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> Present.ContentReferenceRequest {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> Present.ContentReferenceRequest {
                let returnMe:Present.ContentReferenceRequest = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:Present.ContentReferenceRequest) throws -> Present.ContentReferenceRequest.Builder {
                if other == Present.ContentReferenceRequest() {
                    return self
                }
                if other.hasUuid {
                    uuid = other.uuid
                }
                if other.hasType {
                    type = other.type
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Present.ContentReferenceRequest.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Present.ContentReferenceRequest.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 10:
                        uuid = try codedInputStream.readString()

                    case 16:
                        let valueInttype = try codedInputStream.readEnum()
                        if let enumstype = Present.ContentType(rawValue:valueInttype){
                            type = enumstype
                        } else {
                            try unknownFieldsBuilder.mergeVarintField(fieldNumber: 2, value:Int64(valueInttype))
                        }

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Present.ContentReferenceRequest.Builder {
                let resultDecodedBuilder = Present.ContentReferenceRequest.Builder()
                if let jsonValueUuid = jsonMap["uuid"] as? String {
                    resultDecodedBuilder.uuid = jsonValueUuid
                }
                if let jsonValueType = jsonMap["type"] as? String {
                    resultDecodedBuilder.type = try Present.ContentType.fromString(str: jsonValueType)
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> Present.ContentReferenceRequest.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try Present.ContentReferenceRequest.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

    /// Response describing stored content.
    final public class ContentResponse : GeneratedMessage {

        public static func == (lhs: Present.ContentResponse, rhs: Present.ContentResponse) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasUuid == rhs.hasUuid) && (!lhs.hasUuid || lhs.uuid == rhs.uuid)
            fieldCheck = fieldCheck && (lhs.hasContentType == rhs.hasContentType) && (!lhs.hasContentType || lhs.contentType == rhs.contentType)
            fieldCheck = fieldCheck && (lhs.hasContent == rhs.hasContent) && (!lhs.hasContent || lhs.content == rhs.content)
            fieldCheck = fieldCheck && (lhs.hasContentThumbnail == rhs.hasContentThumbnail) && (!lhs.hasContentThumbnail || lhs.contentThumbnail == rhs.contentThumbnail)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }

        /// The uuid of the content
        public fileprivate(set) var uuid:String = ""
        public fileprivate(set) var hasUuid:Bool = false

        public fileprivate(set) var contentType:Present.ContentType = Present.ContentType.jpeg
        public fileprivate(set) var hasContentType:Bool = false
        /// The content URL
        public fileprivate(set) var content:String = ""
        public fileprivate(set) var hasContent:Bool = false

        /// The content thumbnail URL
        public fileprivate(set) var contentThumbnail:String = ""
        public fileprivate(set) var hasContentThumbnail:Bool = false

        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            if !hasUuid {
                return false
            }
            if !hasContentType {
                return false
            }
            if !hasContent {
                return false
            }
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if hasUuid {
                try codedOutputStream.writeString(fieldNumber: 1, value:uuid)
            }
            if hasContentType {
                try codedOutputStream.writeEnum(fieldNumber: 7, value:contentType.rawValue)
            }
            if hasContent {
                try codedOutputStream.writeString(fieldNumber: 8, value:content)
            }
            if hasContentThumbnail {
                try codedOutputStream.writeString(fieldNumber: 9, value:contentThumbnail)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            if hasUuid {
                serialize_size += uuid.computeStringSize(fieldNumber: 1)
            }
            if (hasContentType) {
                serialize_size += contentType.rawValue.computeEnumSize(fieldNumber: 7)
            }
            if hasContent {
                serialize_size += content.computeStringSize(fieldNumber: 8)
            }
            if hasContentThumbnail {
                serialize_size += contentThumbnail.computeStringSize(fieldNumber: 9)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> Present.ContentResponse.Builder {
            return Present.ContentResponse.classBuilder() as! Present.ContentResponse.Builder
        }
        public func getBuilder() -> Present.ContentResponse.Builder {
            return classBuilder() as! Present.ContentResponse.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Present.ContentResponse.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Present.ContentResponse.Builder()
        }
        public func toBuilder() throws -> Present.ContentResponse.Builder {
            return try Present.ContentResponse.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Present.ContentResponse) throws -> Present.ContentResponse.Builder {
            return try Present.ContentResponse.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if hasUuid {
                jsonMap["uuid"] = uuid
            }
            if hasContentType {
                jsonMap["contentType"] = contentType.toString()
            }
            if hasContent {
                jsonMap["content"] = content
            }
            if hasContentThumbnail {
                jsonMap["contentThumbnail"] = contentThumbnail
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Present.ContentResponse {
            return try Present.ContentResponse.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Present.ContentResponse {
            return try Present.ContentResponse.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            if hasUuid {
                output += "\(indent) uuid: \(uuid) \n"
            }
            if (hasContentType) {
                output += "\(indent) contentType: \(contentType.description)\n"
            }
            if hasContent {
                output += "\(indent) content: \(content) \n"
            }
            if hasContentThumbnail {
                output += "\(indent) contentThumbnail: \(contentThumbnail) \n"
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasUuid {
                    hashCode = (hashCode &* 31) &+ uuid.hashValue
                }
                if hasContentType {
                     hashCode = (hashCode &* 31) &+ contentType.hashValue
                }
                if hasContent {
                    hashCode = (hashCode &* 31) &+ content.hashValue
                }
                if hasContentThumbnail {
                    hashCode = (hashCode &* 31) &+ contentThumbnail.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Present.ContentResponse"
        }
        override public func className() -> String {
            return "Present.ContentResponse"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:Present.ContentResponse = Present.ContentResponse()
            public func getMessage() -> Present.ContentResponse {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            /// The uuid of the content
            public var uuid:String {
                get {
                    return builderResult.uuid
                }
                set (value) {
                    builderResult.hasUuid = true
                    builderResult.uuid = value
                }
            }
            public var hasUuid:Bool {
                get {
                    return builderResult.hasUuid
                }
            }
            @discardableResult
            public func setUuid(_ value:String) -> Present.ContentResponse.Builder {
                self.uuid = value
                return self
            }
            @discardableResult
            public func clearUuid() -> Present.ContentResponse.Builder{
                builderResult.hasUuid = false
                builderResult.uuid = ""
                return self
            }
            /// The type of content.
                public var contentType:Present.ContentType {
                    get {
                        return builderResult.contentType
                    }
                    set (value) {
                        builderResult.hasContentType = true
                        builderResult.contentType = value
                    }
                }
                public var hasContentType:Bool{
                    get {
                        return builderResult.hasContentType
                    }
                }
            @discardableResult
                public func setContentType(_ value:Present.ContentType) -> Present.ContentResponse.Builder {
                  self.contentType = value
                  return self
                }
            @discardableResult
                public func clearContentType() -> Present.ContentResponse.Builder {
                   builderResult.hasContentType = false
                   builderResult.contentType = .jpeg
                   return self
                }
            /// The content URL
            public var content:String {
                get {
                    return builderResult.content
                }
                set (value) {
                    builderResult.hasContent = true
                    builderResult.content = value
                }
            }
            public var hasContent:Bool {
                get {
                    return builderResult.hasContent
                }
            }
            @discardableResult
            public func setContent(_ value:String) -> Present.ContentResponse.Builder {
                self.content = value
                return self
            }
            @discardableResult
            public func clearContent() -> Present.ContentResponse.Builder{
                builderResult.hasContent = false
                builderResult.content = ""
                return self
            }
            /// The content thumbnail URL
            public var contentThumbnail:String {
                get {
                    return builderResult.contentThumbnail
                }
                set (value) {
                    builderResult.hasContentThumbnail = true
                    builderResult.contentThumbnail = value
                }
            }
            public var hasContentThumbnail:Bool {
                get {
                    return builderResult.hasContentThumbnail
                }
            }
            @discardableResult
            public func setContentThumbnail(_ value:String) -> Present.ContentResponse.Builder {
                self.contentThumbnail = value
                return self
            }
            @discardableResult
            public func clearContentThumbnail() -> Present.ContentResponse.Builder{
                builderResult.hasContentThumbnail = false
                builderResult.contentThumbnail = ""
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> Present.ContentResponse.Builder {
                builderResult = Present.ContentResponse()
                return self
            }
            override public func clone() throws -> Present.ContentResponse.Builder {
                return try Present.ContentResponse.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> Present.ContentResponse {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> Present.ContentResponse {
                let returnMe:Present.ContentResponse = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:Present.ContentResponse) throws -> Present.ContentResponse.Builder {
                if other == Present.ContentResponse() {
                    return self
                }
                if other.hasUuid {
                    uuid = other.uuid
                }
                if other.hasContentType {
                    contentType = other.contentType
                }
                if other.hasContent {
                    content = other.content
                }
                if other.hasContentThumbnail {
                    contentThumbnail = other.contentThumbnail
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Present.ContentResponse.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Present.ContentResponse.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 10:
                        uuid = try codedInputStream.readString()

                    case 56:
                        let valueIntcontentType = try codedInputStream.readEnum()
                        if let enumscontentType = Present.ContentType(rawValue:valueIntcontentType){
                            contentType = enumscontentType
                        } else {
                            try unknownFieldsBuilder.mergeVarintField(fieldNumber: 7, value:Int64(valueIntcontentType))
                        }

                    case 66:
                        content = try codedInputStream.readString()

                    case 74:
                        contentThumbnail = try codedInputStream.readString()

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Present.ContentResponse.Builder {
                let resultDecodedBuilder = Present.ContentResponse.Builder()
                if let jsonValueUuid = jsonMap["uuid"] as? String {
                    resultDecodedBuilder.uuid = jsonValueUuid
                }
                if let jsonValueContentType = jsonMap["contentType"] as? String {
                    resultDecodedBuilder.contentType = try Present.ContentType.fromString(str: jsonValueContentType)
                }
                if let jsonValueContent = jsonMap["content"] as? String {
                    resultDecodedBuilder.content = jsonValueContent
                }
                if let jsonValueContentThumbnail = jsonMap["contentThumbnail"] as? String {
                    resultDecodedBuilder.contentThumbnail = jsonValueContentThumbnail
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> Present.ContentResponse.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try Present.ContentResponse.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

}
extension Present.ContentRequest: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Present.ContentRequest> {
        var mergedArray = Array<Present.ContentRequest>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Present.ContentRequest? {
        return try Present.ContentRequest.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Present.ContentRequest {
        return try Present.ContentRequest.Builder().mergeFrom(data: data, extensionRegistry:Present.ContentRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Present.ContentRequest {
        return try Present.ContentRequest.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Present.ContentRequest {
        return try Present.ContentRequest.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Present.ContentRequest {
        return try Present.ContentRequest.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Present.ContentRequest {
        return try Present.ContentRequest.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Present.ContentRequest {
        return try Present.ContentRequest.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "uuid": return self.uuid
        default: return nil
        }
    }
}
extension Present.ContentRequest.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "uuid": return self.uuid
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "uuid":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.uuid = newSubscriptValue
            default: return
            }
        }
    }
}
extension Present.ContentUploadRequest: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Present.ContentUploadRequest> {
        var mergedArray = Array<Present.ContentUploadRequest>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Present.ContentUploadRequest? {
        return try Present.ContentUploadRequest.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Present.ContentUploadRequest {
        return try Present.ContentUploadRequest.Builder().mergeFrom(data: data, extensionRegistry:Present.ContentRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Present.ContentUploadRequest {
        return try Present.ContentUploadRequest.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Present.ContentUploadRequest {
        return try Present.ContentUploadRequest.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Present.ContentUploadRequest {
        return try Present.ContentUploadRequest.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Present.ContentUploadRequest {
        return try Present.ContentUploadRequest.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Present.ContentUploadRequest {
        return try Present.ContentUploadRequest.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "uuid": return self.uuid
        case "type": return self.type
        case "content": return self.content
        case "contentThumbnail": return self.contentThumbnail
        default: return nil
        }
    }
}
extension Present.ContentUploadRequest.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "uuid": return self.uuid
            case "type": return self.type
            case "content": return self.content
            case "contentThumbnail": return self.contentThumbnail
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "uuid":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.uuid = newSubscriptValue
            case "type":
                guard let newSubscriptValue = newSubscriptValue as? Present.ContentType else {
                    return
                }
                self.type = newSubscriptValue
            case "content":
                guard let newSubscriptValue = newSubscriptValue as? Data else {
                    return
                }
                self.content = newSubscriptValue
            case "contentThumbnail":
                guard let newSubscriptValue = newSubscriptValue as? Data else {
                    return
                }
                self.contentThumbnail = newSubscriptValue
            default: return
            }
        }
    }
}
extension Present.ContentReferenceRequest: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Present.ContentReferenceRequest> {
        var mergedArray = Array<Present.ContentReferenceRequest>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Present.ContentReferenceRequest? {
        return try Present.ContentReferenceRequest.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Present.ContentReferenceRequest {
        return try Present.ContentReferenceRequest.Builder().mergeFrom(data: data, extensionRegistry:Present.ContentRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Present.ContentReferenceRequest {
        return try Present.ContentReferenceRequest.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Present.ContentReferenceRequest {
        return try Present.ContentReferenceRequest.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Present.ContentReferenceRequest {
        return try Present.ContentReferenceRequest.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Present.ContentReferenceRequest {
        return try Present.ContentReferenceRequest.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Present.ContentReferenceRequest {
        return try Present.ContentReferenceRequest.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "uuid": return self.uuid
        case "type": return self.type
        default: return nil
        }
    }
}
extension Present.ContentReferenceRequest.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "uuid": return self.uuid
            case "type": return self.type
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "uuid":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.uuid = newSubscriptValue
            case "type":
                guard let newSubscriptValue = newSubscriptValue as? Present.ContentType else {
                    return
                }
                self.type = newSubscriptValue
            default: return
            }
        }
    }
}
extension Present.ContentResponse: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Present.ContentResponse> {
        var mergedArray = Array<Present.ContentResponse>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Present.ContentResponse? {
        return try Present.ContentResponse.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Present.ContentResponse {
        return try Present.ContentResponse.Builder().mergeFrom(data: data, extensionRegistry:Present.ContentRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Present.ContentResponse {
        return try Present.ContentResponse.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Present.ContentResponse {
        return try Present.ContentResponse.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Present.ContentResponse {
        return try Present.ContentResponse.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Present.ContentResponse {
        return try Present.ContentResponse.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Present.ContentResponse {
        return try Present.ContentResponse.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "uuid": return self.uuid
        case "contentType": return self.contentType
        case "content": return self.content
        case "contentThumbnail": return self.contentThumbnail
        default: return nil
        }
    }
}
extension Present.ContentResponse.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "uuid": return self.uuid
            case "contentType": return self.contentType
            case "content": return self.content
            case "contentThumbnail": return self.contentThumbnail
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "uuid":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.uuid = newSubscriptValue
            case "contentType":
                guard let newSubscriptValue = newSubscriptValue as? Present.ContentType else {
                    return
                }
                self.contentType = newSubscriptValue
            case "content":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.content = newSubscriptValue
            case "contentThumbnail":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.contentThumbnail = newSubscriptValue
            default: return
            }
        }
    }
}

// @@protoc_insertion_point(global_scope)
